package "compiler/util"

/// Class used to store data about a start and end location.
/// 
/// author:  Braden Steffaniak
/// since:   v0.2.33 Sep 28, 2014 at 6:28:45 PM
/// version: v0.2.33 Sep 28, 2014 at 6:28:45 PM
class Bounds {
    public Int start
    public Int end
    
    visible static Bounds EMPTY = new Bounds(-1, -1)
    
    /// Get the count of the Bounds. end - start.
    /// 
    /// return: The count of the Bounds.
    visible Int count => end - start
    
    /// Get whether or not the bounds are positive and that they have
    /// a count.
    /// 
    /// return: Whether or not the Bounds is valid.
    visible Bool isValid => start >= 0 && end > 0
    
    /// Get whether or not the bounds are endless.
    /// 
    /// return: Whether or not the bounds will search endlessly.
    visible Bool isEndless => end < 0
    
    /// Get whether or not the bounds are optional.
    /// 
    /// return: Whether or not the bounds will search optionally.
    visible Bool isOptional => start == 0
    
    /// Create a Bounds instance with the specified start and
    /// end location.
    /// 
    /// start: The start location of the Bound.
    /// end:   The end location of the Bound.
    public construct(Int start = 0, Int end = 0) {
        this.start = start
        this.end   = end
    }
    
    /// Extract a substring from the given source at the specified bound's
    /// start and end. This is equivalent to the following:
    /// <code>source.substring(Bounds.start, Bounds.end)</code>
    /// 
    /// source: The String to get the substring from.
    /// return: The extracted substring.
    public extractString(String source) => isValid ? source.substring(start, end) : null
    public extractPreString(String source) => isValid ? source.substring(0, start) : null
    public extractPostString(String source) => isValid ? source.substring(end) : source
    public trimString(String source) => isValid ? extractPreString(source) + extractPostString(source) : source
    
    public invalidate() => this { start = end = -1 }
    
    /// @nova/Object.equals(Object)
    /// 
    /// bounds: The Bounds to check against.
    /// return: Whether or not the two Bounds have equal values.
    public equals(Bounds bounds) => bounds != null && bounds.start == start && bounds.end == end
    
    /// Generate a String representation of the Bounds Object
    /// containing the start and end position of the Bounds.
    /// 
    /// @nova/Object.toString()
    /// 
    /// return: A String representation of the Bounds Object.
    public toString() => "[" + start + ", " + end + "]"
    
    /// Clone the values from the specified Bounds instance Into the given
    /// Bounds instance. This overwrites the existing values in the given
    /// Bounds instance in favor for the specified Bounds's values.
    /// 
    /// bounds: The Bounds to set the values of.
    public cloneTo(Bounds bounds) {
        bounds.start = start
        bounds.end   = end
    }
    
    /// Clone the specified Bounds's values Into a brand spankin' new
    /// Bounds instance.
    /// 
    /// @java.lang.Object.clone()
    /// 
    /// return: The new Bounds instance.
    public clone() => new Bounds(start, end)
}