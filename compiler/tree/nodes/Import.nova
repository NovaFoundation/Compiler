package "compiler/tree/nodes"

import "compiler/SyntaxMessage"
import "compiler/SyntaxErrorException"
import "compiler/util/Location"

import "compiler/util/CompilerStringFunctions"

class Import extends Node {
    public Bool used
    
    public String alias, importLocation
    
    visible String parentLocation => importLocation.substring(0, importLocation.lastIndexOf("/", defaultReturnValue: 0))
    visible String className => importLocation.substring(importLocation.lastIndexOf("/") + 1)
    
    public static String IDENTIFIER = "import"
    public static String ALIAS_IDENTIFIER = "as"
    
    visible NovaClass classDeclaration => program.getClassDeclaration(importLocation)
    
    public construct(Node parent = null, Location location = Location.INVALID) {
        super(parent, location)
        
        
    }
    
    public getClassLocation(Bool aliased = false) =>
    	aliased && alias != null ? "#parentLocation/#alias" : importLocation
    
    /// <summary>
    /// Decode the given input into a ArrayAccess node. If the input cannot be parsed
    /// into a ArrayAccess node, null is returned.<br><br>
    /// <div id="example-inputs">
    ///     Example inputs:
    ///     <ul>
    ///         <li>import "nova/datastruct/list/Array" as MyArray</li>
    ///         <li>import "nova/datastruct/Tree"</li>
    ///         <li>import "nova/Object"</li>
    ///     </ul>
    /// </div>
    /// </summary>
    /// 
    /// <param name="input">The input string to decode into a ArrayAccess instance.</param>
    /// <param name="parent">The parent of the ArrayAccess node.</param>
    /// <param name="location">The location of the input text in the source file.</param>
    /// <param name="require">Whether or not to throw a syntax error if the input could not
    ///     be parsed.</param>
    /// <returns>The parsed ArrayAccess node, if successful; null otherwise.</returns>
    public static parse(String input, Node parent = null, Location location = Location.INVALID, Bool require = true) -> Import {
        if (input.nextWordIndex(IDENTIFIER) == 0) {
            var node = new Import(parent, location)
            
            var quoteStart = input.nextNonWhitespaceIndex(IDENTIFIER.count)
            
            if (quoteStart < 0 || input[quoteStart] != '"') {
                return null
            }
            
            var quoteEnd = input.findEndingChar('"', quoteStart)
            
            if (quoteEnd < 0) {
                SyntaxMessage.error("Missing ending quotation for import statement", node)
            }
            
            var importLocation = input.substring(quoteStart + 1, quoteEnd)
            var alias = input.substring(quoteEnd + 1).trim()
            
            node.importLocation = importLocation
            node.alias = alias.count > 0 ? alias : null
            
            if (true) {//node.validateImportLocation(importLocation) && node.validateAlias(alias, require))
                return node
            }
        }
        
        return null
    }
    
    public toString() => "import \"#importLocation\""
}