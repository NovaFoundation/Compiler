package "compiler/tree/nodes/functions"

import "compiler/tree/nodes/Node"
import "compiler/tree/nodes/Scope"
import "compiler/util/Location"
import "compiler/SyntaxMessage"

class BodyFunction extends FunctionDeclaration {
    public Scope scope <=> scope
    
    /// <summary>
    /// Create a new BodyFunction node.<br><br>
    /// <include id="example-inputs">
    /// </summary>
    /// 
    /// <param name="parent">The parent of the BodyFunction node.</param>
    /// <param name="location">The location of the input text in the source file.</param>
    public construct(Node parent = null, Location location = Location.INVALID) {
        super(parent, location)
        
        scope = new Scope(this, location)
    }
    
    public parseStatement(String input, Node parent = null, Location location = Location.INVALID, Bool require = true) =>
        scope.parseStatement(input, this, location, require)
    
    /// <summary>
    /// Decode the given input into a BodyFunction node. If the input cannot be parsed
    /// into a BodyFunction node, null is returned.<br><br>
    /// <div id="example-inputs">
    ///     Example inputs:
    ///     <ul>
    ///         <li></li>
    ///         <li></li>
    ///         <li></li>
    ///     </ul>
    /// </div>
    /// </summary>
    /// 
    /// <param name="input">The input string to decode into a BodyFunction instance.</param>
    /// <param name="parent">The parent of the BodyFunction node.</param>
    /// <param name="location">The location of the input text in the source file.</param>
    /// <param name="require">Whether or not to throw a syntax error if the input could not
    ///     be parsed.</param>
    /// <returns>The parsed BodyFunction node, if successful; null otherwise.</returns>
    public static parse(String input, Node parent = null, Location location = Location.INVALID, Bool require = true) -> BodyFunction {
        var function = FunctionDeclaration.parse(input, parent, location, require)
        
        if (function != null) {
            var node = new BodyFunction(parent, location)
            
            return (BodyFunction)function.cloneTo(node)
        }
        
        if (require) {
            SyntaxMessage.error("Invalid function declaration '#input'", parent)
        }
        
        return null
    }
}