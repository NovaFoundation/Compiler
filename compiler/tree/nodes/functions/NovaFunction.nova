package "compiler/tree/nodes/functions"

import "compiler/tree/nodes/Node"
import "compiler/tree/nodes/variables/InstanceDeclaration"
import "compiler/util/Location"

import "compiler/util/CompilerStringFunctions"

class NovaFunction extends InstanceDeclaration {
    visible Bool isStatic
    visible Bool isInstance => !isStatic
    visible NovaFunction parentFunction => this
    
    visible ParameterList parameterList
    visible Parameter[] parameters => parameterList.parameters
    
    /// <summary>
    /// Create a new NovaFunction node.<br><br>
    /// <include id="example-inputs">
    /// </summary>
    /// 
    /// <param name="parent">The parent of the NovaFunction node.</param>
    /// <param name="location">The location of the input text in the source file.</param>
    public construct(Node parent = null, Location location = Location.INVALID) {
        super(parent, location)
        
        parameterList = new ParameterList(parent, location)
    }
    
    public findSignature(String input) -> String {
        var start = input.indexOf('(')
        
        if (start < 0) {
            return null
        }
        
        var end = input.findEndingMatch(start, '(', ')')
        
        if (end < 0) {
            return null
        }
        
        return input.substring(end: start).trim() + " " + input.substring(start: end + 1).trim()
    }
    
    public findParameters(String input) -> String {
        var start = input.indexOf('(')
        
        if (start < 0) {
            return null
        }
        
        var end = input.findEndingMatch(start, '(', ')')
        
        if (end < 0) {
            return null
        }
        
        return input.substring(start + 1, end).trim()
    }
    
    public parseSignature(String signature) =>
        signature.split(/\s+/).all((word, index, words) -> {
            if (word.count > 0 && !parseModifier(word)) {
                if (name == null && word.isIdentifier) {
                   name = word
                } else {
                    return false
                }
            }
            
            return true
        })
        
    public parseParameter(String parameter) -> Bool {
        var param = Parameter.parse(parameter, parameterList, location, false)
        
        if (param != null) {
            parameters.add(param)
            
            return true
        }
        
        return false
    }
    
    public parseParameters(String parameters) =>
        parameters.splitAtCommas().all((param, index, words) -> {
            if (param.count > 0) {
                return parseParameter(param)
            }
            
            return true
        })
    
    public toString() => "#writeModifiers() #name".replace(/\s+/, " ").trim() + "#parameterList"
}