package "compiler/tree/nodes/functions"

import "compiler/tree/nodes/Node"
import "compiler/tree/nodes/Value"
import "compiler/tree/nodes/variables/Variable"
import "compiler/tree/nodes/variables/VariableDeclaration"
import "compiler/tree/nodes/ClassDeclaration"
import "compiler/SyntaxErrorException"
import "compiler/util/Location"
import "compiler/tree/nodes/Accessible"

import "compiler/util/CompilerStringFunctions"

/// @Variable extension that represents 
///
/// author: Braden Steffaniak
/// since: 
/// version: 
class FunctionCall extends Variable {
    visible FunctionArgumentList argumentList
    
    visible Value[] arguments => argumentList.arguments
    
    public Bool isAssignable => false
    
    /// Create a new FunctionCall node.
    /// 
    /// #exampleInputs
    /// 
    /// parent:   The parent of the FunctionCall node.
    /// location: The location of the input text in the source file.
    public construct(Node parent = null, Location location = Location.INVALID) {
        super(parent, location)
        
        argumentList = new FunctionArgumentList(this, location)
    }
    
    /// Parse the given input into a FunctionCall node. If the input cannot be parsed
    /// into a FunctionCall node, null is returned.
    /// 
    /// #exampleInputs:
    ///     Example inputs:
    ///      * 
    ///      * 
    ///      * 
    /// 
    /// input:    The input string to parse into a FunctionCall instance.
    /// parent:   The parent of the FunctionCall node.
    /// location: The location of the input text in the source file.
    /// require:  Whether or not to throw a syntax error if the input could not
    ///           be parsed.
    /// return:   The parsed FunctionCall node, if successful; null otherwise.
    public static parse(String input, Node parent = null, Location location = Location.INVALID, Bool require = true) -> FunctionCall {
        var name = findName(input)
        var arguments = findArguments(input)
        
        if (name != null && arguments != null) {
            var node = new FunctionCall(parent, location)
            
            node.name = name
            
            if (node.parseArguments(arguments) && node.searchDeclaration()) {
                return node
            }
        }
        
        return null
    }
    
    static findName(String input) -> String {
        var index = input.indexOf('(')
        
        if (index > 0) {
            var name = input.substring(end: index).trim()
            
            if (name.isIdentifier) {
                return name
            }
        }
        
        return null
    }
    
    static findArguments(String input) -> String[] {
        var start = input.indexOf('(')
        
        if (start > 0) {
            var end = input.findEndingMatch(start, '(', ')')
            
            if (end > start) {
                return input.substring(start + 1, end).trim().splitAtCommas()
            }
        }
        
        return null
    }
    
    parseArgument(String argument) -> Bool {
        var statement = Value.parse(argument, this)
        
        if (statement != null) {
            arguments.add(statement)
            
            return true
        }
        
        return false
    }
    
    parseArguments(String[] arguments) =>
        arguments.all({ parseArgument(_) })
    
    searchDeclaration() -> Bool {
        var ref = referenceClass
        
        if (ref != null) {
            var func = ref.functions.firstWhere({ _.name.equals(name) })
            
            if (func != null) {
                declaration = func
                
                return true
            }
        }
        
        return false
    }
    
    public toNova() => name + "#argumentList" + writeAccessedNodes()
    public toString() => toNova()
}