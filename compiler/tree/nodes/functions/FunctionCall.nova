package "compiler/tree/nodes/functions"

import "compiler/tree/nodes/Node"
import "compiler/tree/nodes/Value"
import "compiler/tree/nodes/variables/Variable"
import "compiler/SyntaxErrorException"
import "compiler/util/Location"

import "compiler/util/CompilerStringFunctions"

/// <summary>
/// <a href="compiler/tree/nodes/Variable">Variable</a> extension that represents 
/// <summary>
///
/// <author>Braden Steffaniak</author>
/// <since></since>
/// <version></version>
class FunctionCall extends Variable {
    visible FunctionArgumentList argumentList
    
    visible Value[] arguments => argumentList.arguments
    
    /// <summary>
    /// Create a new FunctionCall node.<br><br>
    /// <include id="example-inputs">
    /// </summary>
    /// 
    /// <param name="parent">The parent of the FunctionCall node.</param>
    /// <param name="location">The location of the input text in the source file.</param>
    public construct(Node parent = null, Location location = Location.INVALID) {
        super(parent, location)
        
        argumentList = new FunctionArgumentList(this, location)
    }
    
    /// <summary>
    /// Decode the given input into a FunctionCall node. If the input cannot be parsed
    /// into a FunctionCall node, null is returned.<br><br>
    /// <div id="example-inputs">
    ///     Example inputs:
    ///     <ul>
    ///         <li></li>
    ///         <li></li>
    ///         <li></li>
    ///     </ul>
    /// </div>
    /// </summary>
    /// 
    /// <param name="input">The input string to decode into a FunctionCall instance.</param>
    /// <param name="parent">The parent of the FunctionCall node.</param>
    /// <param name="location">The location of the input text in the source file.</param>
    /// <param name="require">Whether or not to throw a syntax error if the input could not
    ///     be parsed.</param>
    /// <returns>The parsed FunctionCall node, if successful; null otherwise.</returns>
    public static parse(String input, Node parent = null, Location location = Location.INVALID, Bool require = true) -> FunctionCall {
        var name = findName(input)
        var arguments = findArguments(input)
        
        if (name != null && arguments != null) {
            var node = new FunctionCall(parent, location)
            
            node.name = name
            
            if (node.parseArguments(arguments) && node.searchDeclaration()) {
                return node
            }
        }
        
        return null
    }
    
    static findName(String input) -> String {
        var index = input.indexOf('(')
        
        if (index > 0) {
            var name = input.substring(end: index).trim()
            
            if (name.isIdentifier) {
                return name
            }
        }
        
        return null
    }
    
    static findArguments(String input) -> String[] {
        var start = input.indexOf('(')
        
        if (start > 0) {
            var end = input.findEndingMatch(start, '(', ')')
            
            if (end > start) {
                return input.substring(start + 1, end).trim().splitAtCommas()
            }
        }
        
        return null
    }
    
    parseArgument(String argument) -> Bool {
        var statement = Value.parse(argument, this)
        
        if (statement != null) {
            arguments.add(statement)
            
            return true
        }
        
        return false
    }
    
    parseArguments(String[] arguments) =>
        arguments.all({ parseArgument(_) })
    
    searchDeclaration() -> Bool {
        
        
        return true//false
    }
    
    public toString() => super.toString() + "#argumentList"
}