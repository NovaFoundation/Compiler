package "compiler/tree/nodes/functions"

import "compiler/SyntaxErrorException"
import "compiler/InvalidParseException"
import "compiler/util/Location"
import "compiler/tree/nodes/Node"
import "compiler/tree/nodes/Type"
import "compiler/tree/nodes/variables/VariableDeclaration"

import "compiler/util/CompilerStringFunctions"

/// @FunctionCall extension that represents 
///
/// author: Braden Steffaniak
/// since: 
/// version: 
class Instantiation extends FunctionCall {
    /// Create a new Instantiation node.
    /// 
    /// #exampleInputs
    /// 
    /// parent:   The parent of the Instantiation node.
    /// location: The location of the input text in the source file.
    public construct(Node parent = null, Location location = Location.INVALID) {
        super(parent, location)
    }
    
    /// Parse the given input into a Instantiation node. If the input cannot be parsed
    /// into a Instantiation node, null is returned.
    /// 
    /// #exampleInputs:
    ///     Example inputs:
    ///      * 
    ///      * 
    ///      * 
    /// 
    /// input:    The input string to parse into a Instantiation instance.
    /// parent:   The parent of the Instantiation node.
    /// location: The location of the input text in the source file.
    /// require:  Whether or not to throw a syntax error if the input could not
    ///           be parsed.
    /// return:   The parsed Instantiation node, if successful; null otherwise.
    public static parse(String input, Node parent = null, Location location = Location.INVALID, Bool require = true) -> Instantiation {
        if (input.nextWord().equals("new")) {
            var node = new Instantiation(parent, location)
            
            var callString = input.substring("new".count + 1).trim()
            var className = callString.substring(0, callString.indexOf('(', defaultReturnValue: 0))
            
            if (className.isIdentifier) {
                //var call = FunctionCall.parse(callString, node, declaration: )
                node.name = className
                node.declaration = new VariableDeclaration(parent, location)
                node.declaration.name = className
                node.declaration.type = new Type(className)
                
                return node
            }
        }
        
        return null
    }
    
    public toNova() => "new #super.toNova()"
}