package "compiler/tree/nodes/functions"

import "compiler/tree/nodes/Node"
import "compiler/tree/nodes/Value"
import "compiler/tree/nodes/PlaceholderValue"
import "compiler/tree/nodes/variables/LocalDeclaration"
import "compiler/util/Location"

class Parameter extends LocalDeclaration {
    public Value defaultValue
    
    /// Create a new Parameter node.<br><br>
    /// #exampleInputs
    /// 
    /// <param name="parent">The parent of the Parameter node.</param>
    /// <param name="location">The location of the input text in the source file.</param>
    public construct(Node parent = null, Location location = Location.INVALID) {
        super(parent, location)
    }
    
    /// Parse the given input into a Parameter node. If the input cannot be parsed
    /// into a Parameter node, null is returned.<br><br>
    /// #exampleInputs:
    ///     Example inputs:
    ///      * 
    ///      * 
    ///      * 
    /// 
    /// <param name="input">The input string to parse into a Parameter instance.</param>
    /// <param name="parent">The parent of the Parameter node.</param>
    /// <param name="location">The location of the input text in the source file.</param>
    /// <param name="require">Whether or not to throw a syntax error if the input could not
    ///     be parsed.</param>
    /// <returns>The parsed Parameter node, if successful; null otherwise.</returns>
    public static parse(String input, Node parent = null, Location location = Location.INVALID, Bool require = true) -> Parameter {
        var declaration = LocalDeclaration.parse(input, parent, location, require)
        
        if (declaration != null) {
            var node = new Parameter(parent, location)
            
            return (Parameter)declaration.cloneTo(node)
        }
        
        return null
    }
    
    public parsePlaceholders() -> Bool {
        if (defaultValue != null && defaultValue.class.isOfType(PlaceholderValue)) {
            defaultValue = Value.parse((PlaceholderValue)defaultValue)
            
            return defaultValue != null
        } else {
            return true
        }
    }
}