package "compiler/tree/nodes/functions/closures"

import "compiler/tree/nodes/Node"
import "compiler/tree/nodes/Type"
import "compiler/tree/nodes/functions/Parameter"
import "compiler/tree/nodes/functions/ParameterList"
import "compiler/tree/nodes/functions/CallableFunction"
import "compiler/util/Location"

import "compiler/util/CompilerStringFunctions"

class ClosureDeclaration extends Parameter implements CallableFunction {
    visible ParameterList parameterList <=> parameterList
    
    /// Create a new ClosureDeclaration node.
    /// 
    /// #exampleInputs
    /// 
    /// parent:   The parent of the ClosureDeclaration node.
    /// location: The location of the input text in the source file.
    public construct(Node parent = null, Location location = Location.INVALID) {
        super(parent, location)
        
        parameterList = new ParameterList(this)
    }
    
    /// Parse the given input into a ClosureDeclaration node. If the input cannot be parsed
    /// into a ClosureDeclaration node, null is returned.
    /// 
    /// #exampleInputs:
    ///     Example inputs:
    ///      * 
    ///      * 
    ///      * 
    /// 
    /// input:    The input string to parse into a ClosureDeclaration instance.
    /// parent:   The parent of the ClosureDeclaration node.
    /// location: The location of the input text in the source file.
    /// require:  Whether or not to throw a syntax error if the input could not
    ///           be parsed.
    /// return:   The parsed ClosureDeclaration node, if successful; null otherwise.
    public static parse(String input, Node parent = null, Location location = Location.INVALID, Bool require = true) -> ClosureDeclaration {
        var parenIndex = input.indexOf('(')
        
        if (parenIndex > 0) {
            var endIndex = input.findEndingMatch(parenIndex, '(', ')')
            
            if (endIndex > parenIndex) {
                var name = input.substring(end: parenIndex).trim()
                
                if (name.isIdentifier) {
                    var node   = new ClosureDeclaration(parent, location)
                    
                    if (node.parseParameters(input.substring(parenIndex + 1, endIndex).trim(), true)) {
                        node.name = name
                        
                        return node
                    }
                }
            }
        }
        
        return null
    }
    
    /// @CallableFunction.parseParameter override that allows nameless parameters. 
    public parseParameter(String parameter, Bool require = true) =>
        ClosureParameter.parse(parameter, parameterList, require: require)
    
    public writeType() =>
        type != null ?
            "-> #type.toNova()" :
            ""
    
    public toNova() => ("#{name}#parameterList.toNova() " + writeType()).trim()
}