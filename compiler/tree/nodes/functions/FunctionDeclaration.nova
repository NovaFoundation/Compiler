package "compiler/tree/nodes/functions"

import "compiler/SyntaxMessage"
import "compiler/tree/SyntaxTree"
import "compiler/tree/nodes/Node"
import "compiler/tree/nodes/Type"
import "compiler/tree/nodes/variables/InstanceDeclaration"
import "compiler/tree/nodes/variables/VariableDeclaration"
import "compiler/util/Location"

import "compiler/util/CompilerStringFunctions"

class FunctionDeclaration extends InstanceDeclaration {
    visible FunctionDeclaration parentFunction => this
    
    visible ParameterList parameterList
    visible Parameter[] parameters => parameterList.parameters
    
    /// Create a new FunctionDeclaration node.
    /// 
    /// #exampleInputs
    /// 
    /// parent:   The parent of the FunctionDeclaration node.
    /// location: The location of the input text in the source file.
    public construct(Node parent = null, Location location = Location.INVALID) {
        super(parent, location)
        
        parameterList = new ParameterList(parent, location)
    }
    
    public findVariableDeclaration(String name, Bool searchAncestors = true) -> VariableDeclaration {
        var parameter = parameters.firstWhere({ _.name.equals(name) })
        
        if (parameter != null) {
            return parameter
        }
        
        return super.findVariableDeclaration(name, searchAncestors)
    }
    
    public compatibleArguments(Value[] arguments) -> Bool {
        return true
    }
    
    /// Parse the given input into a FunctionDeclaration node. If the input cannot be parsed
    /// into a FunctionDeclaration node, null is returned.
    /// 
    /// #exampleInputs:
    ///     Example inputs:
    ///      *
    ///      *
    ///      *
    /// 
    /// input:    The input string to parse into a FunctionDeclaration instance.
    /// parent:   The parent of the FunctionDeclaration node.
    /// location: The location of the input text in the source file.
    /// require:  Whether or not to throw a syntax error if the input could not
    ///           be parsed.
    /// return:   The parsed FunctionDeclaration node, if successful; null otherwise.
    public static parse(String input, Node parent = null, Location location = Location.INVALID, Bool require = true) -> FunctionDeclaration {
        var signature  = findSignature(input)
        var parameters = findParameters(input)
        var returnType = findReturnType(input)
        
        if (signature != null && parameters != null && returnType != null) {
            var node = new FunctionDeclaration(parent, location)
            
            if (node.parseSignature(signature, require) &&
                node.parseParameters(parameters, require) &&
                (returnType.count == 0 || node.parseType(returnType))) {
                return node
            }
        }
        
        if (require) {
            SyntaxMessage.error("Invalid function declaration '#input'", parent)
        }
        
        return null
    }
    
    static findSignature(String input) -> String {
        var start = input.indexOf('(')
        
        if (start < 0) {
            return null
        }
        
        return input.substring(end: start).trim()
    }
    
    static findReturnType(String input) -> String {
        var start = input.indexOf('(')
        
        if (start < 0) {
            return null
        }
        
        var end = input.findEndingMatch(start, '(', ')')
        
        if (end < 0) {
            return null
        }
        
        if (input.containsAllWhitespaceAfter(end + 1)) {
            return ""
        }
        
        end = input.nextWordIndex("->", end + 1)
        
        if (end < 0) {
            return null
        }
        
        return input.substring(start: end + 2).trim()
    }
    
    static findParameters(String input) -> String {
        var start = input.indexOf('(')
        
        if (start < 0) {
            return null
        }
        
        var end = input.findEndingMatch(start, '(', ')')
        
        if (end < 0) {
            return null
        }
        
        return input.substring(start + 1, end).trim()
    }
    
    public parseSignature(String signature, Bool require) =>
        signature.split(/\s+/).filterEmpty().all((word, index, words) -> {
            if (index == ((Array)words).count - 1) {
                name = word
                
                return name.isIdentifier
            }
            
            return parseModifier(word)
        })
        
    public parseParameter(String parameter, Bool require = true) -> Bool {
        var annotations = SyntaxTree.searchAnnotations(parameter)
        var param = Parameter.parse(annotations.remainingStatement, parameterList, location, false)
        
        if (param != null) {
            parameters.add(param)
            annotations.addTo(param)
            
            return true
        }
        
        SyntaxMessage.errorIf("Invalid parameter '#parameter'", this, require)
        
        return false
    }
    
    public parseParameters(String parameters, Bool require) =>
        parameters.splitAtCommas().all({ parseParameter(_, require) }, false)
    
    public parsePlaceholders() =>
        parameters.all({ _.parsePlaceholders() }, false) &
        super.parsePlaceholders()
    
    public writeHeader() => "#writeModifiers() #name".replace(/\s+/, " ").trim() + "#parameterList" + writeReturnType()
    public writeReturnType() => type != null ? " -> #type" : ""
    
    public toNova() => writeHeader()
    
    public cloneTo(FunctionDeclaration other) => other {
        super.cloneTo(other)
        
        other.parameterList = parameterList
    }
}