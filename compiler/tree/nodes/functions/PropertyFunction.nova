package "compiler/tree/nodes/functions"

import "compiler/tree/nodes/Node"
import "compiler/tree/nodes/Scope"
import "compiler/util/Location"
import "compiler/SyntaxMessage"

import "compiler/util/CompilerStringFunctions"

class PropertyFunction extends BodyFunction {
    /// <summary>
    /// Create a new PropertyFunction node.<br><br>
    /// <include id="example-inputs">
    /// </summary>
    /// 
    /// <param name="parent">The parent of the PropertyFunction node.</param>
    /// <param name="location">The location of the input text in the source file.</param>
    public construct(Node parent = null, Location location = Location.INVALID) {
        super(parent, location)
    }
    
    /// <summary>
    /// Parse the given input into a PropertyFunction node. If the input cannot be parsed
    /// into a PropertyFunction node, null is returned.<br><br>
    /// <div id="example-inputs">
    ///     Example inputs:
    ///     <ul>
    ///         <li></li>
    ///         <li></li>
    ///         <li></li>
    ///     </ul>
    /// </div>
    /// </summary>
    /// 
    /// <param name="input">The input string to parse into a PropertyFunction instance.</param>
    /// <param name="parent">The parent of the PropertyFunction node.</param>
    /// <param name="location">The location of the input text in the source file.</param>
    /// <param name="require">Whether or not to throw a syntax error if the input could not
    ///     be parsed.</param>
    /// <returns>The parsed PropertyFunction node, if successful; null otherwise.</returns>
    public static parse(String input, Node parent = null, Location location = Location.INVALID, Bool require = true) -> PropertyFunction {
        
    }
}