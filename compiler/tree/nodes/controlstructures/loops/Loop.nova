package "compiler/tree/nodes/controlstructures/loops"

import "compiler/tree/nodes/controlstructures/ControlStructure"
import "compiler/tree/nodes/Node"
import "compiler/util/Location"

class Loop extends ControlStructure {
    /// Parse the given input into a Loop node. If the input cannot be parsed
    /// into a Loop node, null is returned.
    /// 
    /// #exampleInputs:
    ///     Example inputs:
    ///      * 
    ///      * 
    ///      * 
    /// 
    /// input:    The input string to parse into a Loop instance.
    /// parent:   The parent of the Loop node.
    /// location: The location of the input text in the source file.
    /// require:  Whether or not to throw a syntax error if the input could not
    ///           be parsed.
    /// return:   The parsed Loop node, if successful; null otherwise.
    public static parse(String input, Node parent = null, Location location = Location.INVALID, Bool require = true) -> Loop {
        var node = null
        
        until (node.class.isOfType(Loop)) {
            node = ForEachLoop.parse(input, parent, location, require)
        }
        
        return node
    }
}