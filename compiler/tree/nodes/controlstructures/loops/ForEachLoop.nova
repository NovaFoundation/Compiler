package "compiler/tree/nodes/controlstructures/loops"

import "compiler/SyntaxErrorException"
import "compiler/InvalidParseException"
import "compiler/util/Location"
import "compiler/tree/nodes/Node"
import "compiler/tree/nodes/Scope"
import "compiler/tree/nodes/Value"
import "compiler/tree/nodes/controlstructures/ControlStructure"

import "compiler/util/CompilerStringFunctions"

/// @Loop extension that represents 
///
/// author: Braden Steffaniak
/// since: 
/// version: 
class ForEachLoop extends Loop {
    visible String variableName
    visible Value iterator
    
    /// Create a new ForEachLoop node.
    /// 
    /// #exampleInputs
    /// 
    /// parent:   The parent of the ForEachLoop node.
    /// location: The location of the input text in the source file.
    public construct(Node parent = null, Location location = Location.INVALID) {
        super(parent, location)
    }
    
    /// Parse the given input into a ForEachLoop node. If the input cannot be parsed
    /// into a ForEachLoop node, null is returned.
    /// 
    /// #exampleInputs:
    ///     Example inputs:
    ///      * 
    ///      * 
    ///      * 
    /// 
    /// input:    The input string to parse into a ForEachLoop instance.
    /// parent:   The parent of the ForEachLoop node.
    /// location: The location of the input text in the source file.
    /// require:  Whether or not to throw a syntax error if the input could not
    ///           be parsed.
    /// return:   The parsed ForEachLoop node, if successful; null otherwise.
    public static parse(String input, Node parent = null, Location location = Location.INVALID, Bool require = true) -> ForEachLoop {
        if (input.nextWord().equals("for")) {
            var node = new ForEachLoop(parent, location)
            
            var contents = input.substring("for".count).trim()
            
            if (contents[0] == '(') {
                var end = contents.findEndingMatch(0, '(', ')')
                
                if (end > 0) {
                    contents = contents.substring(1, end).trim()
                    
                    var inIndex = contents.findWordOnTopLevel("in")
                    
                    if (inIndex > 0) {
                        var variable = contents.substring(end: inIndex).trim()
                        var iterator = contents.substring(inIndex + "in".count + 1).trim()
                        
                        if (!node.parseIterator(iterator)) {
                            softly throw new InvalidParseException("Unable to parse for each loop iterator '#iterator'", node)
                        } else if (!node.parseVariable(variable)) {
                            softly throw new InvalidParseException("Unable to parse for each loop variable '#variable'", node)
                        } else {
                            return node
                        }
                    }
                }
            }
        }
        
        return null
    }
    
    parseIterator(String input) => true {
        iterator = Value.parse(input, this)
        
        if (iterator == null) {
            // return false
        }
    }
    
    parseVariable(String input) => true {
        this.variableName = input
    }
    
    public writeNova() =>
        "for (#variableName in #iterator) #scope.toNova()"
}