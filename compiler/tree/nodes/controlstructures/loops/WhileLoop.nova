package "compiler/tree/nodes/controlstructures/loops"

import "compiler/SyntaxErrorException"
import "compiler/InvalidParseException"
import "compiler/util/Location"
import "compiler/tree/nodes/Node"
import "compiler/tree/nodes/Scope"
import "compiler/tree/nodes/Value"
import "compiler/tree/nodes/controlstructures/ControlStructure"

import "compiler/util/CompilerStringFunctions"

/// @Loop extension that represents 
///
/// author: Braden Steffaniak
/// since: 
/// version: 
class WhileLoop extends Loop {
    visible Value condition
    
    /// Create a new WhileLoop node.
    /// 
    /// #exampleInputs
    /// 
    /// parent:   The parent of the WhileLoop node.
    /// location: The location of the input text in the source file.
    public construct(Node parent = null, Location location = Location.INVALID) {
        super(parent, location)
    }
    
    /// Parse the given input into a WhileLoop node. If the input cannot be parsed
    /// into a WhileLoop node, null is returned.
    /// 
    /// #exampleInputs:
    ///     Example inputs:
    ///      * 
    ///      * 
    ///      * 
    /// 
    /// input:    The input string to parse into a WhileLoop instance.
    /// parent:   The parent of the WhileLoop node.
    /// location: The location of the input text in the source file.
    /// require:  Whether or not to throw a syntax error if the input could not
    ///           be parsed.
    /// return:   The parsed WhileLoop node, if successful; null otherwise.
    public static parse(String input, Node parent = null, Location location = Location.INVALID, Bool require = true) -> WhileLoop {
        if (input.nextWord().equals("while")) {
            var node = new WhileLoop(parent, location)
            
            var contents = input.substring("while".count).trim()
            
            if (contents[0] == '(') {
                var end = contents.findEndingMatch(0, '(', ')')
                
                if (end > 0) {
                    contents = contents.substring(1, end).trim()
                    
                    if (!node.parseCondition(contents)) {
                        softly throw new InvalidParseException("Unable to parse while loop condition '#contents'", node)
                    } else {
                        return node
                    }
                }
            }
        }
        
        return null
    }
    
    parseCondition(String input) =>
        (condition = Value.parse(input, this)) != null
    
    public writeNova() =>
        "while (#condition.toNova()) #scope.toNova()"
}