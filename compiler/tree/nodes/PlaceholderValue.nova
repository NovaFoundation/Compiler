package "compiler/tree/nodes"

import "compiler/SyntaxErrorException"
import "compiler/util/Location"

/// @Value extension that represents 
///
/// author: Braden Steffaniak
/// since: 
/// version:
class PlaceholderValue extends Value {
    public String value
    
    visible Scope scope <=> scope
    
    /// Create a new PlaceholderValue node.
    /// 
    /// #exampleInputs
    /// 
    /// parent:   The parent of the PlaceholderValue node.
    /// location: The location of the input text in the source file.
    public construct(Node parent = null, Location location = Location.INVALID, String value = null) {
        super(parent, location)
        
        this.value = value
    }
    
    public addChild(Node child) {
        scope = scope ?: new Scope(this, location)
        
        scope.children.add(child)
        
        super.addChild(child)
    }
    
    /// Parse the given input into a PlaceholderValue node. If the input cannot be parsed
    /// into a PlaceholderValue node, null is returned.
    /// 
    /// #exampleInputs:
    ///     Example inputs:
    ///      * 
    ///      * 
    ///      * 
    /// 
    /// input:    The input string to parse into a PlaceholderValue instance.
    /// parent:   The parent of the PlaceholderValue node.
    /// location: The location of the input text in the source file.
    /// require:  Whether or not to throw a syntax error if the input could not
    ///           be parsed.
    /// return:   The parsed PlaceholderValue node, if successful; null otherwise.
    public static parse(String input, Node parent = null, Location location = Location.INVALID, Bool require = true) =>
        new PlaceholderValue(parent, location, input)
    
    public writeScope() =>
        scope != null ?
            " #scope.toNova()" :
            ""
    
    public writeNova() => "'#{value}#{writeScope()}'"
}