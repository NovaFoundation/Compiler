package "compiler/tree/nodes"

import "nova/datastruct/Pair"
import "nova/datastruct/list/List"

import "compiler/util/SyntaxUtils"
import "compiler/tree/nodes/functions/FunctionCall"

import "compiler/util/CompilerStringFunctions"

interface Accessible {
    public Bool safeNavigation
    
    /**
     * Get the next node that is accessed by the specified node.<br>
     * <br>
     * For example:
     * <blockquote><pre>
     * tree.next.calculateSize()</pre></blockquote>
     * In the previous statement, "<code>calculateSize()</code>" is the
     * accessed node of the "<code>next</code>" node, and
     * "<code>next</code>" is the accessed node of the "<code>tree</code>"
     * node.
     * 
     * @return The next node that is accessed by the specified node.
     */
    public Accessible accessedNode => null {
        set {}
    }
    
    public Accessible returnedNode {
        get {
            var prev = this
            var current = accessedNode
            
            while (current != null) {
                prev = current
                current = current.accessedNode
            }
            
            return prev
        }
        
        no set
    }
    
    public Accessible accessingNode {
        get {
            var n = (Node)this
            
            if (n.parent.class.isOfType(Accessible)) {
                return (Accessible)n.parent
            }
            
            /*Node n = (Node)this
            
            if (canAccess && n.parent.class.isOfType(Accessible) && !n.parent.class.isOfType(VariableDeclaration) && !n.parent.containsScope) {
                Accessible id = (Accessible)n.parent
                
                if (!skipPriority && id instanceof Priority) {
                    Priority priority = (Priority)id
                    Node last = priority.getLastAncestorOfType([Priority.class], false)
                    
                    last = last == null ? priority : last
                    
                    if (this != priority.getContents()) {
                        return (Accessible)priority.getReturnedContents()
                    } else if (last.parent instanceof Accessible && ((Accessible)last.parent).doesAccess) {
                        return (Accessible)id.parent
                    }
                }
                
                if (id instanceof TernaryOperation && ((TernaryOperation) id).isDecoding()) {
                    
                } else if (id.isDecodingAccessedNode(n) || id.accessedNode == this) {
                    return id
                }
            }*/
            
            
            
            return null
        }
        
        no set
    }
    
    visible ClassDeclaration referenceClass {
        get {
            if (isAccessed) {
                return ((Value)accessingNode).typeClass
            }
            
            return ((Node)this).parentClass
        }
        
        no set
    }
    
    /**
     * Get whether this specified identifier node was accessed through
     * the dot operator of another Identifier.
     * 
     * @return Whether or not the identifier was accessed.
     */
    public Bool isAccessed => accessingNode != null
    public Bool doesAccess => accessedNode != null
    public Bool canAccess => false//((Value)this).parent instanceof Parameter || ((Value)this).getAncestorWithScope() != null
    
    /**
     * Get the next accessed node that is of the given class type.
     * 
     * @param type The class type to search for.
     * @return The next accessed node of the given type. If there are
     *      no matches, null is returned.
     */
    public getNextAccessingOfType(Class type) => getNextAccessingOfType([type])
    
    /**
     * Get the next accessed node that is of the given class types.
     * 
     * @param types The class types to search for.
     * @return The next accessed node of the given types. If there are
     *      no matches, null is returned.
     */
    public getNextAccessingOfType(Class[] types) => getNextAccessingOfType(types, false)
    
    /**
     * Get the next accessed node that is of the given class types.
     * 
     * @param types The class types to search for.
     * @param opposite Whether or not to search for or against the given
     *      data.
     * @return The next accessed node of the given types. If there are
     *      no matches, null is returned.
     */
    public getNextAccessingOfType(Class[] types, Bool opposite) -> Accessible {
        Accessible current = accessingNode
        
        while (current != null && SyntaxUtils.checkTypes(types, ((Object)current).class) == opposite) {
            current = current.accessingNode
        }
        
        return current
    }
    
    /**
     * Get the last accessed node of the given type that was in a series.
     * In other words, if we are looking for the last method call and
     * there are three consecutive method calls in a row, the third method
     * call node would be returned.
     * 
     * @param type The class type to search for.
     * @param opposite Whether or not to search for or against the given
     *      type.
     * @return The last accessed node of the given type. If there is not a
     *      match, null is returned.
     */
    public getLastAccessingOfType(Class type, Bool opposite, Bool inclusive = false) =>
        getLastAccessingOfType([type], opposite, inclusive)
    
    /**
     * Get the last accessed node of the given types that was in a series.
     * In other words, if we are looking for the last method call and
     * there are three consecutive method calls in a row, the third method
     * call node would be returned.
     * 
     * @param types An arrayAccess of accepted types.
     * @param opposite Whether or not to search for or against the given
     *      data.
     * @return The last accessed node of the given types. If there is not
     *      a match, null is returned.
     */
    public getLastAccessingOfType(Class[] types, Bool opposite, Bool inclusive = false) -> Accessible {
        Accessible previous = null
        Accessible current  = this
        
        if (inclusive && SyntaxUtils.checkTypes(types, ((Object)current).class) != opposite) {
            return current
        }
        
        while (current != null && SyntaxUtils.checkTypes(types, ((Object)current).class) != opposite) {
            previous = current
            current  = current.accessingNode
        }
        
        return previous
    }
    
    public getLastAccessedOfType(Class type, Bool opposite) => getLastAccessedOfType([type], opposite)
    public getLastAccessedOfType(Class[] types, Bool opposite) -> Accessible {
        Accessible previous = null
        Accessible current  = this
        
        while (current != null) {
            if (SyntaxUtils.checkTypes(types, ((Object)current).class) != opposite) {
                previous = current
            }
            
            current  = current.accessedNode
        }
        
        return previous
    }
    
    public getLastAccessed() -> Accessible {
        Accessible previous = this
        Accessible current  = this
        
        while (current != null) {
            previous = current
            current = current.accessedNode
        }
        
        return previous
    }
    
    /**
     * Get the next node that this node accesses that is of the given
     * type.
     * 
     * @param type The type to search for.
     * @return The next accessed of the given type. If there is not a
     *      match, null is returned.
     */
    public getNextAccessedOfType(Class type) => getNextAccessedOfType([type])
    
    /**
     * Get the next node that this node accesses that is of the given
     * types.
     * 
     * @param types The types to search for.
     * @return The next accessed of the given types. If there is not a
     *      match, null is returned.
     */
    public getNextAccessedOfType(Class[] types) -> Accessible {
        Accessible current = accessedNode
        
        while (current != null && !SyntaxUtils.checkTypes(types, ((Object)current).class)) {
            current = current.accessedNode
        }
        
        return current
    }
    
    /**
     * Get the root variable that is accessing the specified Identifier.
     * 
     * @param inclusive Whether or not to return the specified Identifier
     *      if the Identifier is not accessed.
     * @return The root variable that is accessing the specified
     *      Identifier.
     */
    public getRootReferenceNode(Bool inclusive = false) -> Accessible {
        if (!isAccessed) {
            if (inclusive) {
                return this
            }
            
            return getReferenceNode(false, true)
        }
        
        Accessible reference = getReferenceNode(false, true)
        
        Accessible node = null//reference.getLastAccessingOfType([Closure.class, MethodCall.class], true)
        
        if (node == null) {
            return reference
        }
        
        return node
    }
    
    /**
     * Get the Node that represents the value that contains the value.<br>
     * For example:<br>
     * <blockquote><pre>
     * ClassName obj = new ClassName();
     * 
     * obj.data.methodName();</pre></blockquote>
     * In the previous statements, the method "<u><code>methodName()</code></u>"
     * is being referenced through the "<u><code>data</code></u>"
     * identifier.<br>
     * <br>
     * If the identifier is not explicitly called through an object, it
     * will return the instance type that the node was referenced
     * within.<br>
     * For example:
     * <blockquote><pre>
     * obj.calculateArea().width;</pre></blockquote>
     * The Identifier for the method call "<u><code>calculateArea()</code></u>"
     * is returned.<br>
     * <br>
     * If the node is referenced within a static context, the containing
     * ClassDeclaration is returned.<br>
     * For example:
     * <blockquote><pre>
     * Time.currentTimeMillis();</pre></blockquote>
     * The Identifier for the ClassDeclaration "<u><code>Time</code></u>" is
     * returned.
     * 
     * @return The Node that represents the calling Identifier.
     */
    public getReferenceNode(Bool requireAccessingNode = false, Bool skipPriority = false) -> Accessible {
        Value n = null//(Value)this
        
        Accessible accessing = accessingNode//(skipPriority)
        
        if (accessing != null || requireAccessingNode) {
            return accessing
        }
        
        /*MethodDeclaration methodDeclaration = n.parentMethod
        
        if (methodDeclaration != null) {
            ObjectReference id = n.getObjectReferenceNode(methodDeclaration)
            
            if (id != null) {
                return id
            }
        }*/
        
        return n.parentClass
    }
    
    public static parse(String input, Node parent = null, Bool require = true) -> Accessible {
        var node = null
        
        until (node != null) {
            node = StaticClassReference.parse(input, parent, require: require)
            node = FunctionCall.parse(input, parent, require: require)
        }
        
        return node
    }
    
    public static parseNodeAccess(String input, Node parent, Bool require = true) -> Node {
        var prev = 0
        var dot  = input.findDotOperatorIndex()
        
        var fragments = new String[]
        
        while (dot > 0) {
            fragments.add(input.substring(prev, dot))
            
            prev = dot + 1
            dot  = input.findDotOperatorIndex(prev)
        }
        
        if (prev > 0) {
            fragments.add(input.substring(prev))
            
            var root    = parse(fragments[0], parent, require: require)
            var current = root
            
            if (current != null) {
                if (fragments.skip(1).all({
                    var accessed = parse(_, parent: (Node)current, require: require)
                    
                    if (accessed != null) {
                        current.accessedNode = accessed
                        
                        return true
                    }
                    
                    return false
                })) {
                    return root
                }
            }
        }
        
        return null
    }
    
    public writeAccessedNodes() -> String =>
        doesAccess ? ".#{((Node)accessedNode).toNova()}#{accessedNode.writeAccessedNodes()}" : ""
}