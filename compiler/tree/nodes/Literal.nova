package "compiler/tree/nodes"

import "compiler/SyntaxErrorException"
import "compiler/util/Location"

import "compiler/util/CompilerStringFunctions"

/// @Value extension that represents 
/// 
/// author: Braden Steffaniak
/// since: 
/// version: 
class Literal extends Value implements Accessible {
    public String value
    
    /// Create a new Literal node.
    /// 
    /// #exampleInputs
    /// 
    /// parent:   The parent of the Literal node.
    /// location: The location of the input text in the source file.
    public construct(Node parent = null, Location location = Location.INVALID) {
        super(parent, location)
        
        
    }
    
    /// Parse the given input into a Literal node. If the input cannot be parsed
    /// into a Literal node, null is returned.
    /// 
    /// #exampleInputs:
    ///     Example inputs:
    ///      * 
    ///      * 
    ///      * 
    /// 
    /// input:    The input string to parse into a Literal instance.
    /// parent:   The parent of the Literal node.
    /// location: The location of the input text in the source file.
    /// require:  Whether or not to throw a syntax error if the input could not
    ///           be parsed.
    /// return:   The parsed Literal node, if successful; null otherwise.
    public static parse(String input, Node parent = null, Location location = Location.INVALID, Bool require = true) -> Literal {
        var type = getLiteralType(input)
        
        if (type != null) {
            var node = new Literal(parent, location)
            
            node.type = Type.parse(type)
            node.value = input
            
            if (node.formatValue()) {
                return node
            }
        }
        
        return null
    }
    
    static getLiteralType(String input) -> String {
        if (input.count >= 2 && input[0] == '"' && input.chars.last == '"') {
            return "String"
        } else if (input.count == 3 && input[0] == '\'' && input[2] == '\'') {
            return "Char"
        } else if (input.isBool) {
            return "Bool"
        } else if (input.isNumber) {
            return "Int"
        }
        
        return null
    }
    
    formatValue() -> Bool {
        if (type.name.equals("String")) {
            
        }
        
        return true
    }
    
    public toNova() => value
}