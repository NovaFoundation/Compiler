package "compiler/tree/nodes/annotations"

import "compiler/tree/nodes/Node"
import "compiler/util/Location"

import "compiler/util/CompilerStringFunctions"

/**
 * @Node extension that represents
 * 
 * author: Braden Steffaniak
 */
class Annotation extends Node {
    /// Create a new Annotation node.
    /// 
    /// #exampleInputs
    /// 
    /// parent:   The parent of the Annotation node.
    /// location: The location of the input text in the source file.
    public construct(Node parent = null, Location location = Location.INVALID) {
        super(parent, location)
    }
    
    /// Parse the given input into a Annotation node. If the input cannot be parsed
    /// into a Annotation node, null is returned.
    /// 
    /// #exampleInputs:
    ///     Example inputs:
    ///     * [PrimitiveArray]
    ///     * [Override]
    ///     * [KeepWhitespace baseline: "indent"]
    ///     * [Target not js]
    /// 
    /// input:    The input string to parse into a Annotation instance.
    /// parent:   The parent of the Annotation node.
    /// location: The location of the input text in the source file.
    /// require:  Whether or not to throw a syntax error if the input could not
    ///           be parsed.
    /// return:   The parsed Annotation node, if successful; null otherwise.
    public static parse(String input, Node parent = null, Location location = Location.INVALID, Bool require = true) -> Annotation {
        if (input.startsWith('[')) {
            var end = input.findEndingMatch(0, '[', ']')
            
            if (end > 1) {
                var node = null
                var contents = input.substring(1, end).trim()
                
                var bounds = contents.nextWordBounds()
                var type = contents.substring(bounds)
                var parameters = contents.substring(bounds.end).trim()
                
                until (node != null) {
                    node = PrimitiveArrayAnnotation.parse(type, parameters, parent, location, require)
                    node = TargetAnnotation.parse(type, parameters, parent, location, require)
                }
                
                return node
            }
        }
        
        return null
    }
    
    public getRemainingStatement(String input) => input.substring(input.findEndingMatch(0, '[', ']') + 1).trim()
}