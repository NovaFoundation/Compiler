package "compiler/tree/nodes/annotations"

import "compiler/tree/nodes/Node"
import "compiler/util/Location"
import "compiler/util/Bounds"

import "compiler/util/CompilerStringFunctions"

/// @Annotation extension that represents
/// 
/// author: Braden Steffaniak
class TargetAnnotation extends Annotation {
    visible Bool opposite
    
    visible String[] targets = new String[]
    
    /// Create a new TargetAnnotation node.
    /// 
    /// #exampleInputs
    /// 
    /// parent:   The parent of the TargetAnnotation node.
    /// location: The location of the input text in the source file.
    public construct(Node parent = null, Location location = Location.INVALID) {
        super(parent, location)
    }
    
    /// Parse the given input into a TargetAnnotation node. If the input cannot be parsed
    /// into a TargetAnnotation node, null is returned.
    /// 
    /// #exampleInputs:
    ///     Example inputs:
    ///     * 
    ///     * 
    ///     * 
    /// 
    /// input:    The input string to parse into a TargetAnnotation instance.
    /// parent:   The parent of the TargetAnnotation node.
    /// location: The location of the input text in the source file.
    /// require:  Whether or not to throw a syntax error if the input could not
    ///           be parsed.
    /// return:   The parsed TargetAnnotation node, if successful; null otherwise.
    public static parse(String type, String parameters, Node parent = null, Location location = Location.INVALID, Bool require = true) -> TargetAnnotation {
        if (type.equals("Target") && parameters.count > 0) {
            var node = new TargetAnnotation(parent, location)
            
            node.targets = parameters.trim().toLowerCase().split(/\s+/)
            node.opposite = node.targets.first.equals("not")
            
            if (node.opposite) {
                node.targets = node.targets.skip(1)
            }
            
            return node
        }
        
        return null
    }
    
    public writeNova() => "[Target #{opposite ? "not " : ""}" + "#{targets.join(" ")}]"
}