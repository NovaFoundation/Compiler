package "compiler/tree/nodes/variables"

import "compiler/tree/nodes/Node"
import "compiler/tree/nodes/Value"
import "compiler/tree/nodes/PlaceholderValue"
import "compiler/SyntaxErrorException"
import "compiler/util/Location"

class FieldDeclaration extends InstanceDeclaration {
    public Value initializationValue
    
    /// <summary>
    /// Create a new FieldDeclaration node.<br><br>
    /// <include id="example-inputs">
    /// </summary>
    /// 
    /// <param name="parent">The parent of the FieldDeclaration node.</param>
    /// <param name="location">The location of the input text in the source file.</param>
    public construct(Node parent = null, Location location = Location.INVALID) {
        super(parent, location)
    }
    
    /// <summary>
    /// Decode the given input into a FieldDeclaration node. If the input cannot be parsed
    /// into a FieldDeclaration node, null is returned.<br><br>
    /// <div id="example-inputs">
    ///     Example inputs:
    ///     <ul>
    ///         <li></li>
    ///         <li></li>
    ///         <li></li>
    ///     </ul>
    /// </div>
    /// </summary>
    /// 
    /// <param name="input">The input string to decode into a FieldDeclaration instance.</param>
    /// <param name="parent">The parent of the FieldDeclaration node.</param>
    /// <param name="location">The location of the input text in the source file.</param>
    /// <param name="require">Whether or not to throw a syntax error if the input could not
    ///     be parsed.</param>
    /// <returns>The parsed FieldDeclaration node, if successful; null otherwise.</returns>
    public static parse(String input, Node parent = null, Location location = Location.INVALID, Bool require = true) -> FieldDeclaration {
        String initializationValue = null
        var initializationValueIndex = input.indexOf('=')
        
        if (initializationValueIndex > 0 && input.count > initializationValueIndex + 1 && input[initializationValueIndex + 1] != '>') {
            initializationValue = input.substring(initializationValueIndex + 1).trim()
            input = input.substring(end: initializationValueIndex).trim()
        }
        
        var declaration = InstanceDeclaration.parse(input, parent, location, require)
        
        if (declaration != null) {
            var node = new FieldDeclaration(parent, location)
            node.initializationValue = PlaceholderValue.parse(initializationValue, node, location)
            
            return (FieldDeclaration)declaration.cloneTo(node)
        }
        
        return null
    }
    
    public parsePlaceholders() -> Bool {
        if (initializationValue != null && initializationValue.class.isOfType(PlaceholderValue)) {
            initializationValue = Value.parse((PlaceholderValue)initializationValue)
            
            return initializationValue != null
        } else {
            return true
        }
    }
    
    public toString() => super.toString() + (initializationValue != null ? " = #initializationValue" : "")
}