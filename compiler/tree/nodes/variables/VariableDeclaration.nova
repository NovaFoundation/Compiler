package "compiler/tree/nodes/variables"

import "compiler/tree/nodes/Node"
import "compiler/SyntaxErrorException"
import "compiler/util/Location"
import "compiler/tree/nodes/Identifier"

import "compiler/util/CompilerStringFunctions"

/// <summary>
/// <a href="compiler/tree/nodes/Node">Node</a> extension that represents 
/// <summary>
///
/// <author>Braden Steffaniak</author>
/// <since></since>
/// <version></version>
class VariableDeclaration extends Identifier {
    
    
    /// <summary>
    /// Create a new VariableDeclaration node.<br><br>
    /// <include id="example-inputs">
    /// </summary>
    /// 
    /// <param name="parent">The parent of the VariableDeclaration node.</param>
    /// <param name="location">The location of the input text in the source file.</param>
    public construct(Node parent = null, Location location = Location.INVALID) {
        super(parent, location)
        
        
    }
    
    /// <summary>
    /// Parse the given input into a VariableDeclaration node. If the input cannot be parsed
    /// into a VariableDeclaration node, null is returned.<br><br>
    /// <div id="example-inputs">
    ///     Example inputs:
    ///     <ul>
    ///         <li></li>
    ///         <li></li>
    ///         <li></li>
    ///     </ul>
    /// </div>
    /// </summary>
    /// 
    /// <param name="input">The input string to parse into a VariableDeclaration instance.</param>
    /// <param name="parent">The parent of the VariableDeclaration node.</param>
    /// <param name="location">The location of the input text in the source file.</param>
    /// <param name="require">Whether or not to throw a syntax error if the input could not
    ///     be parsed.</param>
    /// <returns>The parsed VariableDeclaration node, if successful; null otherwise.</returns>
    public static parse(String input, Node parent = null, Location location = Location.INVALID, Bool require = true) -> VariableDeclaration {
        var words = input.splitValues()
        
        if (words.count == 2) {
            var node = new VariableDeclaration(parent, location)
            
            node.name = words.last
            
            if (node.name.isIdentifier && node.parseType(words.first)) {
                return node
            }
        }
        
        return null
    }
    
    public parseModifier(String modifier) -> Bool {
        return false
    }
    
    public parseModifiers(String modifiers) =>
        parseModifiers(modifiers.split(/\s+/))
    
    public parseModifiers(String[] modifiers) =>
        modifiers.all(x -> { x.count == 0 || parseModifier(x) })
    
    public getInvalidModifiers(String modifiers) =>
        modifiers.split(/\s+/).filter(x -> { x.count > 0 && !parseModifier(x) })
    
    public writeModifiers() => ""
    
    public toNova() => "#writeModifiers() #writeType() #name".replace(/\s+/, " ").trim()
    
    public cloneTo(VariableDeclaration other) => other {
        super.cloneTo(other)
        
        
    }
}