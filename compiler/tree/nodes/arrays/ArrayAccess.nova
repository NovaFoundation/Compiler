package "compiler/tree/nodes/arrays"

import "compiler/tree/nodes/Node"
import "compiler/SyntaxErrorException"
import "compiler/util/Location"

/// <summary>
/// <a href="compiler/tree/nodes/Node">Value</a> extension that keeps track
/// of any time an array is being accessed. For example, the statement: "[34]"
/// is an array access. Obviously the previous code segment does nothing, however
/// these nodes will be intertwined with method calls, assignments, if statements, etc.
/// <summary>
///
/// <author>Braden Steffaniak</author>
/// <since>v0.2 Mar 24, 2014 at 10:45:29 PM</since>
/// <version>v0.2.45 Oct 20, 2016 at 10:19:22 PM</version>
class ArrayAccess extends Node {
    //visible Dimensions dimensions
    
    /// <summary>
    /// Create a new ArrayAccess node.<br><br>
    /// <include id="example-inputs">
    /// </summary>
    /// 
    /// <param name="input">The input string to decode into a ArrayAccess instance.</param>
    /// <param name="parent">The parent of the ArrayAccess node.</param>
    /// <param name="location">The location of the input text in the source file.</param>
    public construct(Node parent = null, Location location = Location.INVALID) {
        super(parent, location)
        
        //dimensions = new Dimensions(this, location)
    }
    
    /// <summary>
    /// Decode the given input into a ArrayAccess node. If the input cannot be parsed
    /// into a ArrayAccess node, null is returned.<br><br>
    /// <div id="example-inputs">
    ///     Example inputs:
    ///     <ul>
    ///         <li>[0][10 + 3]</li>
    ///         <li>[10 + x * (y - z)]</li>
    ///         <li>[Math.round(4.7) + "hello, world".count]</li>
    ///     </ul>
    /// </div>
    /// </summary>
    /// 
    /// <param name="input">The input string to decode into a ArrayAccess instance.</param>
    /// <param name="parent">The parent of the ArrayAccess node.</param>
    /// <param name="location">The location of the input text in the source file.</param>
    /// <param name="require">Whether or not to throw a syntax error if the input could not
    ///     be parsed.</param>
    /// <returns>The parsed ArrayAccess node, if successful; null otherwise.</returns>
    public parse(String input, Node parent = null, Location location = Location.INVALID, Bool require = true) -> ArrayAccess {
        if (input.count >= 3 && input.chars.first == '[' && input.chars.last == ']') {
            ArrayAccess node = new ArrayAccess(parent, location)
            
            
            
            if (true) {
                return node
            }
        }
        
        return null
    }
}