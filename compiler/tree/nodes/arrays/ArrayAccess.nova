package "compiler/tree/nodes/arrays"

import "compiler/tree/nodes/Node"
import "compiler/SyntaxErrorException"
import "compiler/util/Location"

/// @Value extension that keeps track
/// of any time an array is being accessed. For example, the statement: "[34]"
/// is an array access. Obviously the previous code segment does nothing, however
/// these nodes will be intertwined with method calls, assignments, if statements, etc.
///
/// author:  Braden Steffaniak
/// since:   v0.2 Mar 24, 2014 at 10:45:29 PM
/// version: v0.2.45 Oct 20, 2016 at 10:19:22 PM
class ArrayAccess extends Node {
    //visible Dimensions dimensions
    
    /// Create a new ArrayAccess node.
    /// 
    /// #exampleInputs
    /// 
    /// input:    The input string to parse into a ArrayAccess instance.
    /// parent:   The parent of the ArrayAccess node.
    /// location: The location of the input text in the source file.
    public construct(Node parent = null, Location location = Location.INVALID) {
        super(parent, location)
        
        //dimensions = new Dimensions(this, location)
    }
    
    /// Parse the given input into a ArrayAccess node. If the input cannot be parsed
    /// into a ArrayAccess node, null is returned.
    /// 
    /// #exampleInputs
    ///     Example inputs:
    ///      * [0][10 + 3]
    ///      * [10 + x * (y - z)]
    ///      * [Math.round(4.7) + "hello, world".count]
    /// 
    /// input:    The input string to parse into a ArrayAccess instance.
    /// parent:   The parent of the ArrayAccess node.
    /// location: The location of the input text in the source file.
    /// require:  Whether or not to throw a syntax error if the input could not
    ///           be parsed.
    /// return:   The parsed ArrayAccess node, if successful; null otherwise.
    public parse(String input, Node parent = null, Location location = Location.INVALID, Bool require = true) -> ArrayAccess {
        if (input.count >= 3 && input.chars.first == '[' && input.chars.last == ']') {
            ArrayAccess node = new ArrayAccess(parent, location)
            
            
            
            if (true) {
                return node
            }
        }
        
        return null
    }
}