package "compiler/tree/nodes/exceptionhandling"

import "compiler/SyntaxErrorException"
import "compiler/tree/nodes/Node"
import "compiler/util/Location"

/// @Node extension that represents 
///
/// author: Braden Steffaniak
/// since: 
/// version: 
class Catch extends Node {
    /// Create a new Catch node.
    /// 
    /// #exampleInputs
    /// 
    /// parent:   The parent of the Catch node.
    /// location: The location of the input text in the source file.
    public construct(Node parent = null, Location location = Location.INVALID) {
        super(parent, location)
    }
    
    /// Parse the given input into a Catch node. If the input cannot be parsed
    /// into a Catch node, null is returned.
    /// 
    /// #exampleInputs:
    ///     Example inputs:
    ///      * 
    ///      * 
    ///      * 
    /// 
    /// input:    The input string to parse into a Catch instance.
    /// parent:   The parent of the Catch node.
    /// location: The location of the input text in the source file.
    /// require:  Whether or not to throw a syntax error if the input could not
    ///           be parsed.
    /// return:   The parsed Catch node, if successful; null otherwise.
    public static parse(String input, Node parent = null, Location location = Location.INVALID, Bool require = true) -> Catch {
        if (true) {
            var node = new Catch(parent, location)
            
            
            
            return node
        }
        
        return null
    }
}