package "compiler/tree/nodes/exceptionhandling"

import "compiler/SyntaxErrorException"
import "compiler/InvalidParseException"
import "compiler/tree/nodes/Node"
import "compiler/tree/nodes/Type"
import "compiler/tree/nodes/Scope"
import "compiler/util/Location"

import "compiler/util/CompilerStringFunctions"

/// ExceptionHandler extension that represents the declaration of a
/// try node type. See {@link #decodeStatement(Node, String, Location, boolean)}
/// for more details on what correct inputs look like.
/// 
/// @author    Braden Steffaniak
/// @since    v0.1 Mar 22, 2014 at 4:01:38 PM
/// @version    v0.2.38 Dec 6, 2014 at 5:19:17 PM
class Try extends ExceptionHandler {
    visible static String IDENTIFIER = "try"
    
    visible Try parentTry => this
    
    visible Scope scope <=> scope
    
    /// Create a new Try node.
    /// 
    /// #exampleInputs
    /// 
    /// parent:   The parent of the Try node.
    /// location: The location of the input text in the source file.
    public construct(Node parent = null, Location location = Location.INVALID) {
        super(parent, location)
        
        scope = new Scope(this, location)
    }
    
    /// Parse the given input into a Try node. If the input cannot be parsed
    /// into a Try node, null is returned.
    /// 
    /// #exampleInputs:
    ///     Example inputs:
    ///      * 
    ///      * 
    ///      * 
    /// 
    /// input:    The input string to parse into a Try instance.
    /// parent:   The parent of the Try node.
    /// location: The location of the input text in the source file.
    /// require:  Whether or not to throw a syntax error if the input could not
    ///           be parsed.
    /// return:   The parsed Try node, if successful; null otherwise.
    public static parse(String input, Node parent = null, Location location = Location.INVALID, Bool require = true) -> Try {
        if (input.nextWord().equals(IDENTIFIER)) {
            var node = new Try(parent, location)
            
            var contents = input.substring(IDENTIFIER.count).trim()
            
            if (contents.count == 0) {
                return node
            }
        }
        
        return null
    }
    
    public writeNova() =>
        "try #scope.toNova()"
}