package "compiler/tree/nodes"

import "compiler/util/Location"
import "compiler/SyntaxMessage"

import "compiler/util/CompilerStringFunctions"

class Package extends Node {
    public String location
    
    public construct(Node parent = null, Location location = Location.INVALID) {
        super(parent, location)
    }
    
    public static generateDefaultPackage(Node parent = null, Location location = Location.INVALID) -> Package {
        return new Package(parent, location)
    }
    
    /// <summary>
    /// Decode the given input into a Package node. If the input cannot be parsed
    /// into a Package node, null is returned.<br><br>
    /// <div id="example-inputs">
    ///     Example inputs:
    ///     <ul>
    ///         <li>package "nova/datastruct/list"</li>
    ///         <li>package "nova/datastruct"</li>
    ///         <li>package "nova"</li>
    ///     </ul>
    /// </div>
    /// </summary>
    /// 
    /// <param name="input">The input string to decode into a Package instance.</param>
    /// <param name="parent">The parent of the Package node.</param>
    /// <param name="location">The location of the input text in the source file.</param>
    /// <param name="require">Whether or not to throw a syntax error if the input could not
    ///     be parsed.</param>
    /// <returns>The parsed Package node, if successful; null otherwise.</returns>
    public static parse(String input, Node parent = null, Location location = Location.INVALID, Bool require = true) -> Package {
        if (input.nextWordIndex("package") == 0) {
            var node = new Package(parent, location)
            
            var quoteStart = input.nextNonWhitespaceIndex("package".count)
            
            if (quoteStart < 0 || input[quoteStart] != '"') {
                return null
            }
            
            var quoteEnd = input.findEndingChar('"', quoteStart)
            
            if (quoteEnd < 0) {
                SyntaxMessage.error("Missing ending quotation for Package statement", node)
            }
            
            var packageLocation = input.substring(quoteStart + 1, quoteEnd)
            
            node.location = packageLocation
            
            if (true) {//node.validatePackageLocation(PackageLocation) && node.validateAlias(alias, require))
                return node
            }
        }
        
        return null
    }
    
    public toNova() => location != null ? "package \"#location\"" : ""
    public toString() => toNova()
}