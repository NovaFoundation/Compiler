package "compiler/tree/nodes"

import "compiler/SyntaxErrorException"
import "compiler/SyntaxMessage"
import "compiler/util/Location"
import "compiler/tree/nodes/variables/InstanceDeclaration"
import "compiler/tree/nodes/variables/VariableDeclaration"
import "compiler/tree/nodes/variables/FieldDeclaration"
import "compiler/tree/nodes/variables/ArrayBracketOverload"
import "compiler/tree/nodes/functions/FunctionDeclaration"
import "compiler/tree/nodes/functions/BodyFunction"
import "nova/regex/Pattern"

import "compiler/util/CompilerStringFunctions"

/// @InstanceDeclaration extension that represents 
///
/// author: Braden Steffaniak
/// since: 
/// version: 
class ClassDeclaration extends InstanceDeclaration implements Abstractable {
    visible ClassDeclaration parentClass => this
    
    visible String location =>
        parentFile.packageDeclaration.location != null ?
            parentFile.packageDeclaration.location + "/" + name :
            name
    
    public Bool isAbstract <=> isAbstract
    
    public Type extendedClass
    public Type[] implementedInterfaces = new Type[0]
    
    public FieldDeclaration[] fields
    public FunctionDeclaration[] functions
    
    visible ArrayBracketOverload arrayBracketOverload
    
    visible Bool isPrivate => visibility.count > 0 && super.isPrivate
    visible Bool isPublic => visibility.count == 0 || super.isPublic
    
    /// Create a new ClassDeclaration node.
    /// 
    /// #exampleInputs
    /// 
    /// parent:   The parent of the ClassDeclaration node.
    /// location: The location of the input text in the source file.
    public construct(Node parent = null, Location location = Location.INVALID) {
        super(parent, location)
        
        fields = new FieldDeclaration[]
        functions = new FunctionDeclaration[]
    }
    
    public addChild(Node child) {
        if (child.class.isOfType(FieldDeclaration)) {
            fields.add((FieldDeclaration)child)
        } else if (child.class.isOfType(FunctionDeclaration)) {
            functions.add((FunctionDeclaration)child)
        } else if (child.class.isOfType(ArrayBracketOverload)) {
            if (arrayBracketOverload == null) {
                arrayBracketOverload = (ArrayBracketOverload)child
            } else {
                SyntaxErrorException("Array bracket overload already declared for class '#location'", child)
            }
        } else {
            SyntaxMessage.error("Statement '#child' used in wrong context", child)
        }
    }
    
    public replace(Node toReplace, Node replacement) -> Bool {
        if (toReplace.class.isOfType(FieldDeclaration)) {
            return fields.replace((FieldDeclaration)toReplace, (FieldDeclaration)replacement)
        } else if (toReplace.class.isOfType(FunctionDeclaration)) {
            return functions.replace((FunctionDeclaration)toReplace, (FunctionDeclaration)replacement)
        } else {
            return false
        }
    }
    
    public findCompatibleFunctions(String name, Value[] argumentTypes = null) =>
        functions.filter(func -> {
            func.name.equals(name) &&
            (argumentTypes == null || func.compatibleArguments(argumentTypes))
        })
    
    public findVariableDeclaration(String name, Bool searchAncestors = true) -> VariableDeclaration {
        var field = fields.firstWhere({ _.name.equals(name) })
        
        if (field != null) {
            return field
        }
        
        return super.findVariableDeclaration(name, searchAncestors)
    }
    
    public parseStatement(String input, Node parent = null, Location location = Location.INVALID, Bool require = true) -> Node {
        Node node = null
        
        until (node != null) {
            node = BodyFunction.parse(input, this, location, require)
            node = FieldDeclaration.parse(input, this, location, require)
            node = ArrayBracketOverload.parse(input, this, location, require)
        }
        
        return node
    }
    
    public generateTemporaryScopeNode() -> Node {
        return new BodyFunction(this)
    }
    
    /// Parse the given input into a ClassDeclaration node. If the input cannot be parsed
    /// into a ClassDeclaration node, null is returned.
    /// 
    /// #exampleInputs:
    ///     Example inputs:
    ///      * class MyClass
    ///      * public class Abc extends MyClass
    ///      * private class Xyz extends Abc implements Multiply, Divide
    /// 
    /// input:    The input string to parse into a ClassDeclaration instance.
    /// parent:   The parent of the ClassDeclaration node.
    /// location: The location of the input text in the source file.
    /// require:  Whether or not to throw a syntax error if the input could not
    ///           be parsed.
    /// return:   The parsed ClassDeclaration node, if successful; null otherwise.
    public static parse(String input, Node parent = null, Location location = Location.INVALID, Bool require = true) -> ClassDeclaration {
        var index = input.nextWordIndex("class")
        
        if (index >= 0) {
            var node = new ClassDeclaration(parent, location)
            
            if (!node.parseModifiers(input, index, require)) {
                return null
            }
            
            var nameStartIndex = input.nextNonWhitespaceIndex(index + 6)
            var nameEndIndex   = input.nextWhitespaceIndex(nameStartIndex + 1)
            
            if (node.parseName(input, nameStartIndex, nameEndIndex, require) && node.parseInheritence(input, nameEndIndex, require)) {
                return node
            } else if (require) {
                SyntaxMessage.error("Invalid class declaration '#input'", node)
            }
        } else if (require) {
            SyntaxMessage.error("Invalid class declaration '#input'", parent)
        }
        
        return null
    }
    
    parseModifiers(String input, Int index, Bool require) -> Bool {
        var modifiers = input.substring(end: index).trim()
        
        if (!parseModifiers(modifiers)) {
            var invalid = getInvalidModifiers(modifiers)
            
            SyntaxMessage.errorIf("Invalid modifier#{invalid.count != 1 ? "s" : ""}: '#{invalid.join("', '")}'", this, require)
            
            return false
        }
        
        return true
    }
    
    parseName(String input, Int start, Int end, Bool require) -> Bool {
        if (end > start) {
            name = input.substring(start, end)
            
            if (name.isIdentifier) {
                return true
            } else {
                SyntaxMessage.errorIf("Invalid class name '#name'", this, require)
            }
        }
        
        return false
    }
    
    parseInheritence(String input, Int nameEndIndex, Bool require) -> Bool {
        var extension       = input.substring(input.nextNonWhitespaceIndex(nameEndIndex + 1, defaultReturnValue: input.count))
        var implementations = ""
        var implementsIndex = extension.nextWordIndex("implements")
        
        if (implementsIndex >= 0) {
            implementations = extension.substring(start: implementsIndex).trim()
            extension       = extension.substring(end:   implementsIndex).trim()
        }
        
        return parseExtension(extension, require) && parseImplementations(implementations, require)
    }
    
    parseExtension(String extension, Bool require) -> Bool {
        if (extension.startsWith(/extends\s+/)) {
            extension = extension.substring("extends ".count).trim()
            
            extendedClass = Type.parse(extension)
            
            if (!extendedClass.name.isIdentifier) {
                SyntaxMessage.errorIf("Extended class '#extension' is not a valid type", this, require)
                
                return false
            }
            
            return true
        }
        
        return extension.count == 0
    }
    
    parseImplementations(String implementations, Bool require) -> Bool {
        if (implementations.startsWith(/implements\s+/)) {
            implementedInterfaces = implementations.substring("implements ".count).splitAtCommas(searchGenerics: true).map({ Type.parse(_) })
            
            if (implementedInterfaces.any({ !_.name.isIdentifier })) {
                var invalid = implementedInterfaces.filter({ !_.name.isIdentifier })
                
                SyntaxMessage.errorIf("Invalid interface type#{invalid.count != 1 ? "s" : ""}: '#{invalid.join("', '")}'", this, require)
                
                return false
            }
            
            return true
        }
        
        return implementations.count == 0
    }
    
    [Override]
    public parseModifier(String modifier) -> Bool {
        if (super.parseModifier(modifier)) return true
            
        match (modifier)
            case "abstract" isAbstract = true
            default return false
        return true
    }
    
    public validateTypes() =>
        fields.all({ _.validateTypes() }, false) &
        functions.all({ _.validateTypes() }, false)
    
    public parsePlaceholders() =>
        fields.all({ _.parsePlaceholders() }, false) &
        functions.all({ _.parsePlaceholders() }, false)
    
    public writeHeader() =>
        "#writeModifiers() class #name #writeExtension() #writeImplementedInterfaces()".replace(/\s+/, " ").trim()
    
    public writeModifiers() =>
        super.writeModifiers() + writeAbstract()
    
    public writeExtension() =>
        extendedClass != null ?
            "extends #extendedClass" :
            ""
    
    public writeImplementedInterfaces() =>
        implementedInterfaces.count > 0 ?
            "implements #{implementedInterfaces.join(", ")}" :
            ""
    
    public writeArrayBracketOverload() =>
        arrayBracketOverload != null ?
            arrayBracketOverload.toNova() :
            ""
    
    public toNova() =>
        (writeHeader() + " {\n" +
        writeArrayBracketOverload() +"\n\n" +
        (fields.map({ _.toNova() }).join("\n") + "\n\n" +
        functions.map({ _.toNova() }).join("\n\n")).trim() + "\n" +
        "}").trim()
    
    [Override]
    public toString() => writeHeader()
}