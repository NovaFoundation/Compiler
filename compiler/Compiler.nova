package "compiler"

import "nova/io/File"
import "nova/datastruct/list/Stack"
import "nova/datastruct/list/List"
import "nova/time/Timer"

import "compiler/util/OS"
import "compiler/util/FileUtils"

import "compiler/tree/nodes/ClassDeclaration"
import "compiler/tree/nodes/NovaFile"
import "compiler/tree/nodes/Node"
import "compiler/tree/nodes/Program"
import "compiler/tree/StatementIterator"
import "compiler/tree/SyntaxTree"

import "compiler/util/CompilerStringFunctions"

class Compiler {
    visible static Bool DEBUG = true
    
    visible static Bool testClasses = true
    
    visible String[] errors   = new String[]
    visible String[] warnings = new String[]
    visible String[] info     = new String[]
    
    NovaFile[] files
    
    public static main(String[] args) {
        var c = new Compiler()
        
        c.compile(null)
        
        Console.waitForEnter()
    }
    
    public construct() {
        
    }
    
    public compile(String[] args) {
        String directory = FileUtils.getWorkingDirectoryPath() + "/"
        
        if (DEBUG) {
            testClasses()
            
            var target = "c"
            
            args = [
                "../Compiler",
				"../Misc/example",
				"../Misc/stabilitytest", 
				"-output-directory", "../NovaCompilerOutput/#target",
				"-package-output-directory", "nova", "../StandardLibrary/#target",
//				"-dir", formatPath(directory + "../example"),
//				"-dir", formatPath(directory + "../stabilitytest"),
//				"-run",
//				"-csource",
				"-formatc",
				//testClasses ? "-v" : "",
				"-v",
//				"-gcc",
//				"-tcc",
//				"-small",
//				"-cargs",
//				"-keepc",
				"-single-thread",
				"-single-file",
				"-main",
//				"example/Lab",
//				"stabilitytest/StabilityTest",
//				"example/SvgChart",
//				"example/HashMapDemo",
//				"example/HashSetDemo",
				"compiler/Compiler",
//				"-nogc",
//				"-no-c-output",
//				"-dry",
//				"-no-notes",
//				"-no-warnings",
//				"-no-errors",
				"-no-optimize",
				"-target", target,
//				"-library",
            ]
            
            var program = new Program()
            
            var parentDir = new File("../../../tempstd")
            
            files = parentDir.getChildFiles(true).filter({ _.extension.toLowerCase().equals(".nova") }).map({ new NovaFile(_) })
            
            var timer = new Timer()
            
            try {
                files.forEach(file -> {
                    program.addChild(file)
                })
                
                var tree = new SyntaxTree(this, program)
                
                timer.start()
                
                tree.formTree()
                tree.validateTypes()
                tree.parseStatements()
                
                timer.stop()
                
                var separator = "============================="
                Console.writeLine(tree.root.files
                    //.filter({ _.name.equals("String") })
                    .map(file -> { "#separator #file.name #separator\n#{file.toNova().formatIndentation()}" }).join("\n"))
            } catch (SyntaxErrorException e) {
                
            }
            
            errors.forEach({ Console.writeLine("Error: #_") })
            warnings.forEach({ Console.writeLine("Warning: #_") })
            info.forEach({ Console.writeLine("Info: #_") })
            
            Console.writeLine("Took #{timer.duration}ms")
            
            //Console.writeLine("Args: #args")
        }
    }
    
    testClasses() {
        
    }
}