package "compiler"

import "nova/io/File"
import "nova/datastruct/list/Stack"

import "compiler/util/OS"
import "compiler/util/FileUtils"

import "compiler/tree/nodes/NovaClass"
import "compiler/tree/nodes/NovaFile"
import "compiler/tree/nodes/Node"
import "compiler/tree/nodes/Program"
import "compiler/tree/StatementIterator"

import "compiler/util/CompilerStringFunctions"

class Compiler {
    visible static Bool DEBUG = true
    
    visible static Bool testClasses = true
    
    visible String[] errors   = new String[]
    visible String[] warnings = new String[]
    visible String[] info     = new String[]
    
    public static main(String[] args) {
        var c = new Compiler()
        
        c.compile(null)
        
        Console.waitForEnter()
    }
    
    public construct() {
        
    }
    
    public compile(String[] args) {
        String directory = FileUtils.getWorkingDirectoryPath() + "/"
        
        if (DEBUG) {
            testClasses()
            
            var target = "c"
            
            args = [
                "../Compiler",
				"../Misc/example",
				"../Misc/stabilitytest", 
				"-output-directory", "../NovaCompilerOutput/#target",
				"-package-output-directory", "nova", "../StandardLibrary/#target",
//				"-dir", formatPath(directory + "../example"),
//				"-dir", formatPath(directory + "../stabilitytest"),
//				"-run",
//				"-csource",
				"-formatc",
				//testClasses ? "-v" : "",
				"-v",
//				"-gcc",
//				"-tcc",
//				"-small",
//				"-cargs",
//				"-keepc",
				"-single-thread",
				"-single-file",
				"-main",
//				"example/Lab",
//				"stabilitytest/StabilityTest",
//				"example/SvgChart",
//				"example/HashMapDemo",
//				"example/HashSetDemo",
				"compiler/Compiler",
//				"-nogc",
//				"-no-c-output",
//				"-dry",
//				"-no-notes",
//				"-no-warnings",
//				"-no-errors",
				"-no-optimize",
				"-target", target,
//				"-library",
            ]
            
            [KeepWhitespace indent: "baseline"]
            var input = "class Test {
                             Int x = 15
                    
                             public helloWorld(String x, Int y) {
                                 Console.writeLine(\"ASdfasdfads\")
                             }
                             
                             public construct() {
                                 Console.writeLine(\"Constructed1\")
                                 Console.writeLine(\"Constructed2\")
                                 Console.writeLine(\"Constructed3\")
                                 Console.writeLine(\"Constructed4\")
                                 
                                 Int x = 4;Int y = 4;
                                 
                                 
                                 
                                 x += 4                                 
                             }
                         }"
                         
            
            var program    = new Program(this)
            var file       = new NovaFile(new File("temp.nova"), program)
            var parents    = new Stack<Node>()
            var statements = input.statements
            
            parents.push(file)
            
            try {
                for (statement in statements) {
                    Console.writeLine("'#statement'")
                    
                    var node = parents.peek().parseChild(statement, require: false)
                    
                    Console.writeLine("\tbeginsScope: '#statements.beginsScope'\n
                                       \tendsScope: '#statements.endsScope'\n
                                       \tparse: '#node'\n")
                    
                    if (statements.beginsScope) { // TODO: if null, then create something to replace it
                        if (node == null) {
                            SyntaxMessage.error("Unable to parse scope declaration '#statement'", parents.peek(), throwException: false)
                        } else {
                            parents.push(node)
                        }
                    } else if (statements.endsScope) {
                        repeat (statements.scopesEnded) {
                            if (!parents.isEmpty) {
                                parents.pop()
                            }
                        }
                    }
                }
                
                if (parents.peek() != file) {
                    Console.writeLine("Missing ending brace")
                }
                
                var declarations = [ "private abstract class Something extends MyButt implements yo, what, up323s",
                                          "class Something2",
                                          "class Something3 extends MyButt",
                                          "class Something4 implements Annotatable" ]
                
                declarations.forEach({ Console.writeLine("Parsed: #{NovaClass.parse(_, program)}") })
            } catch (SyntaxErrorException e) {
                
            }
            
            errors.forEach({ Console.writeLine("Error: #_") })
            warnings.forEach({ Console.writeLine("Warning: #_") })
            info.forEach({ Console.writeLine("Info: #_") })
            
            Console.writeLine("Args: #args")
        }
    }
    
    testClasses() {
        
    }
}