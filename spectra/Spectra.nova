package "spectra"

import "nova/io/File"
import "nova/datastruct/list/Stack"
import "nova/datastruct/list/List"
import "nova/datastruct/list/ImmutableArray"
import "nova/time/Timer"

import "spectra/util/OS"
import "spectra/util/FileUtils"

import "spectra/tree/nodes/annotations/Annotation"
import "spectra/tree/nodes/ClassDeclaration"
import "spectra/tree/nodes/NovaFile"
import "spectra/tree/nodes/Node"
import "spectra/tree/nodes/Program"
import "spectra/tree/StatementIterator"
import "spectra/tree/SyntaxTree"

import "spectra/util/CompilerStringFunctions"

[AutoFinal]
class Spectra {
    visible static Bool DEBUG = true
    
    visible static Bool testClasses = true
    
    visible String[] errors   = new String[]
    visible String[] warnings = new String[]
    visible String[] info     = new String[]
    
    var NovaFile[] files
    
    public static main(String[] args) {
        let c = new Spectra()
        
        c.compile(args.skip(1))
        
        Console.waitForEnter()
    }
    
    public construct() {
        
    }
    
    public compile(String[] args) {
        String directory = FileUtils.getWorkingDirectoryPath() + "/"
        
        if (DEBUG) {
            testClasses()
            
            let target = "c"
            
//             args = [
//                 "../Spectra",
// 				"../Misc/example",
// 				"../Misc/stabilitytest", 
// 				"-output-directory", "../NovaSpectraOutput/#target",
// 				"-package-output-directory", "nova", "../StandardLibrary/#target",
// //				"-dir", formatPath(directory + "../example"),
// //				"-dir", formatPath(directory + "../stabilitytest"),
// //				"-run",
// //				"-csource",
// 				"-formatc",
// 				//testClasses ? "-v" : "",
// 				"-v",
// //				"-gcc",
// //				"-tcc",
// //				"-small",
// //				"-cargs",
// //				"-keepc",
// 				"-single-thread",
// 				"-single-file",
// 				"-main",
// //				"example/Lab",
// //				"stabilitytest/StabilityTest",
// //				"example/SvgChart",
// //				"example/HashMapDemo",
// //				"example/HashSetDemo",
// 				"Spectra/Spectra",
// //				"-nogc",
// //				"-no-c-output",
// //				"-dry",
// //				"-no-notes",
// //				"-no-warnings",
// //				"-no-errors",
// 				"-no-optimize",
// 				"-target", target,
// //				"-library",
//             ]
            
            let annotationTypes = Class.ALL.filter({ _.isOfType(Annotation) })
            
            let program = new Program()
            
            let parentDir = new File(args.firstOr("../../../tempstd"))
            
            let parseTimer = new Timer()
            let outputTimer = new Timer()
            let compileTimer = new Timer().start()
            let fileTimer = new Timer().start()
            
            files = parentDir.getChildFiles(true).filter({ _.extension.toLowerCase().equals(".nova") }).map({ new NovaFile(_) })
            
            fileTimer.stop()
            
            try {
                files.forEach({ program.addChild(_) })
                
                let tree = new SyntaxTree(this, program)
                
                parseTimer.start()
                
                tree.formTree()
                tree.validateTypes()
                tree.parseStatements()
                
                parseTimer.stop()
                
                outputTimer.start()
                
                let separator = "============================="
                Console.writeLine(tree.root.files
                    //.filter({ _.name.equals("String") })
                    .map(file -> { "#separator #file.name #separator\n#{file.toNova().formatIndentation()}" }).join("\n"))
                
                outputTimer.stop()
            } catch (SyntaxErrorException e) {
                
            }
            
            compileTimer.stop()
            
            errors.forEach({ Console.writeLine("Error: #_") })
            warnings.forEach({ Console.writeLine("Warning: #_") })
            info.forEach({ Console.writeLine("Info: #_") })
            
            Console.writeLine("Nova file read time: #{fileTimer.duration}ms")
            Console.writeLine("Nova parse time: #{parseTimer.duration}ms")
            Console.writeLine("Nova result output time: #{outputTimer.duration}ms")
            Console.writeLine("Nova compile time: #{compileTimer.duration}ms")
            
            if (System.overheadTimer.iterations > 0) {
                Console.writeLine("Nova overhead timer: #{System.overheadTimer.duration}ms over #{System.overheadTimer.iterations} iterations")
            }
            
            //Console.writeLine("Args: #args")
        }
    }
    
    testClasses() {
        
    }
}