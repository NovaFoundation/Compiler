package "spectra/tree/nodes"

import "spectra/SyntaxErrorException"
import "spectra/InvalidParseException"
import "spectra/util/Location"

import "spectra/util/CompilerStringFunctions"

/// @Value extension that represents 
///
/// author: Braden Steffaniak
/// since: 
/// version: 
class Priority extends Value implements Accessible {
    visible Value value
    visible Value returnedValue => (Value)value.returnedNode
    
    visible Type type => returnedValue.type
    
    /// Create a new Priority node.
    /// 
    /// #exampleInputs
    /// 
    /// parent:   The parent of the Priority node.
    /// location: The location of the input text in the source file.
    public construct(Node parent = null, Location location = Location.INVALID) {
        super(parent, location)
    }
    
    /// Parse the given input into a Priority node. If the input cannot be parsed
    /// into a Priority node, null is returned.
    /// 
    /// #exampleInputs:
    ///     Example inputs:
    ///      * 
    ///      * 
    ///      * 
    /// 
    /// input:    The input string to parse into a Priority instance.
    /// parent:   The parent of the Priority node.
    /// location: The location of the input text in the source file.
    /// require:  Whether or not to throw a syntax error if the input could not
    ///           be parsed.
    /// return:   The parsed Priority node, if successful; null otherwise.
    public static parse(String input, Node parent = null, Location location = Location.INVALID, Bool require = true) -> Priority => null {
        if (input.first == '(' && input.last == ')') {
            var node = new Priority(parent, location)
            var value = input.substring(1, input.count - 1).trim()
            
            if (!node.parseValue(value)) {
                toss new InvalidParseException("Invalid value '#value'", node)
            } else {
                return node
            }
        }
    }
    
    parseValue(String input) =>
        (value = Value.parse(input, this)) != null
    
    public writeNova() => "(#{value.toNova()})" + writeArrayAccess() + writeAccessedNodes()
}