package "spectra/tree/nodes"

import "nova/io/File"
import "nova/io/FileReader"

import "spectra/util/Location"
import "spectra/SyntaxMessage"
import "spectra/tree/nodes/functions/closures/ClosureContext"
import "spectra/tree/nodes/functions/closures/ClosureDeclaration"

class NovaFile extends Node {
    visible NovaFile parentFile => this
    
    visible Bool isExternal => externalType != null
    
    visible String name, source, externalType
    
    visible File file
    
    visible ImportList importList
    
    visible Package packageDeclaration
    visible Import[] imports => importList.imports
    
    visible ClosureDeclaration[] closures = new ClosureDeclaration[]
    visible ClosureContext[] contexts = new ClosureContext[]
    
    visible String fileLocation =>
        packageDeclaration.location ?
            packageDeclaration.location + "/" + name + ".nova" :
            name + ".nova"
    
    public ClassDeclaration classDeclaration => classes.firstWhere({ _.name.equals(name) })
    
    public ClassDeclaration[] classes
    
    visible static String[] DEFAULT_IMPORTS = [
        "nova/exception/ExceptionData",
        "nova/exception/Exception",
        "nova/exception/DivideByZeroException",
        // "nova/io/Console",
        "nova/primitive/number/Number",
        "nova/primitive/number/Byte",
        "nova/primitive/number/Short",
        "nova/primitive/number/Int",
        "nova/primitive/number/Long",
        "nova/primitive/number/Float",
        "nova/primitive/number/Double",
        "nova/primitive/Null",
        "nova/primitive/number/Char",
        "nova/primitive/Bool",
        "nova/datastruct/list/Array",
        "nova/datastruct/list/IntArray",
        "nova/datastruct/list/CharArray",
        "nova/datastruct/list/DoubleArray",
        "nova/datastruct/list/IntRange",
        "nova/thread/Thread",
        "nova/thread/async/Async",
        "nova/gc/GC",
        "nova/math/Math",
        "nova/Object",
        "nova/String",
        "nova/System",
        "nova/meta/Class",
    ]
    
    public construct(File file, Node parent = null, Location location = Location.INVALID) {
        super(parent, location)
        
        this.file = file
        
        var reader = new FileReader(file)
        
        this.source = reader.readAllContents()
        
        reader.close()
        
        name = file.rootName
        
        if (name.contains('.')) {
            externalType = name.substring(name.indexOf('.') + 1)
            name = name.substring(end: name.indexOf('.'))
        }
        
        packageDeclaration = Package.generateDefaultPackage(this)
        importList = new ImportList(this, location)
        classes = new ClassDeclaration[]
        
        addDefaultImports()
    }
	
    public addChild(Node child) {
        if (child.class.isOfType(ClassDeclaration)) {
            addClass((ClassDeclaration)child)
        } else if (child.class.isOfType(Import)) {
            imports.add((Import)child)
        } else if (child.class.isOfType(Package)) {
            packageDeclaration = (Package)child
        } else {
            SyntaxMessage.error("Statement '#child' used in wrong context", child)
        }
    }
    
    addClass(ClassDeclaration child) {
        classes.add(child)
        
        if (child.isPublic && child.name != name) {
            SyntaxMessage.error("Class '#child.name' must have the same name as file '#name'", child)
        }
    }
    
    public parseStatement(String input, Node parent = null, Location location = Location.INVALID, Bool require = true) -> Node {
    	var node = null
        
        until (node) {
            node = ClassDeclaration.parse(input, this, location, require)
            node = TraitDeclaration.parse(input, this, location, require)
            node = InterfaceDeclaration.parse(input, this, location, require)
            node = Import.parse(input, this, location, require)
            node = Package.parse(input, this, location, require)
        }
        
        return node
    }
    
    public generateTemporaryScopeNode() -> Node {
        return new ClassDeclaration(this)
    }
    
    public getImportedClass(String name, Bool includeSelf = true) =>
        includeSelf && name.equals(this.name) ?
            classDeclaration :
            imports.firstWhere({ _.className.equals(name) })?.classDeclaration
    
    addDefaultImports() {
        for (import in DEFAULT_IMPORTS) {
            addImport(import, false).used = true
        }
    }
    
    public addAutoImports() {
        for (file in packageDeclaration.files.filter({ _ != this })) {
            for (class in file.classes.filterNull()) {
                addImport(class.location, false)
            }
        }
    }
    
    public addImport(String location, Bool userAdded = true) -> Import {
        if (containsImport(location)) return null
        
        let node = Import.parse("import \"#location\"", this, this.location)
        
        if (node) {
            node.userAdded = userAdded
            
            imports.add(node)
        } else {
            SyntaxMessage.error("Invalid import location '#location'", this)
        }
        
        return node
    }
    
    public containsImport(String location, Bool absoluteLocation = true, Bool aliased = false) -> Bool {
        return false
    }
    
    public toNova() =>
        (packageDeclaration.toNova() + "\n\n" +
        imports.filter({ _.userAdded }).map({ _.toNova() + "\n" }).join() + "\n" +
        classes.map({ _.toNova() }).join("\n")).trim()
    
    public toString() => "#{name}.nova"
}