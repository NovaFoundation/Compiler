package "spectra/tree/nodes"

import "spectra/InvalidParseException"
import "spectra/util/Location"

import "spectra/util/CompilerStringFunctions"

[AutoFinal]
class ArrayType extends Type {
    visible Type type
    
    visible var Int arrayDimensions = 0
    
    visible Bool isGeneric => type.isGeneric
    visible Bool isPrimitiveType => type.isPrimitiveType
    
    public construct(Type type) {
        type.cloneTo(this)
        
        this.type = type
        this.name = "Array"
    }
    
    public static parse(String input, Node parent = null, Location location = Location.INVALID, Bool require = true) -> ArrayType => null {
        var start = input.findCharOnTopLevel('[')
        
        if (start > 0) {
            let type = Type.parse(input.substring(end: start).trim(), parent, location, require)
            
            if (type) {
                let node = new ArrayType(type)
                let dimensions = input.substring(start).trim()
                
                if (!node.parseDimensions(dimensions, input, parent)) {
                    toss new InvalidParseException("Could not parse array dimensions '#dimensions'", parent)
                } else {
                    return node
                }
            }
        }
    }
    
    parseDimensions(String dimensions, String input, Node parent) -> Bool {
        var start = 0
        var end = dimensions.findEndingMatch(start, '[', ']')
        var last = end
        
        while (end > start) {
            last = end
            
            arrayDimensions++
            
            if (dimensions.substring(start + 1, end).trim().count > 0) {
                toss new InvalidParseException("Type declaration '#input' cannot have contents within the array brackets", parent)
                
                return false
            }
            
            start = dimensions.indexOf('[', end + 1)
            
            if (start < 0) break
            
            end = dimensions.findEndingMatch(start, '[', ']')
        }
        
        return dimensions.count == last + 1
    }
    
    public isValid(Node parent) => type.isValid(parent)
    
    public writeArray() =>
        "[]".repeat(arrayDimensions)
    
    public writeNova() => "#type.name" + writeArray() + writeGenericParameters()
    
    public cloneTo(ArrayType other) => other {
        super.cloneTo(other)
        
        other.arrayDimensions = arrayDimensions
    }
}