package "spectra/tree/nodes"

import "spectra/SyntaxErrorException"
import "spectra/InvalidParseException"
import "spectra/util/Location"

import "spectra/util/CompilerStringFunctions"

/// @TraitDeclaration extension that represents 
///
/// author: Braden Steffaniak
/// since: 
/// version: 
[AutoFinal]
class InterfaceDeclaration extends TraitDeclaration {
    visible String identifier => "interface"
    
    /// Create a new InterfaceDeclaration node.
    /// 
    /// #exampleInputs
    /// 
    /// parent:   The parent of the InterfaceDeclaration node.
    /// location: The location of the input text in the source file.
    public construct(Node parent = null, Location location = Location.INVALID) {
        super(parent, location)
    }
    
    /// Parse the given input into a InterfaceDeclaration node. If the input cannot be parsed
    /// into a InterfaceDeclaration node, null is returned.
    /// 
    /// #exampleInputs:
    ///     Example inputs:
    ///      * 
    ///      * 
    ///      * 
    /// 
    /// input:    The input string to parse into a InterfaceDeclaration instance.
    /// parent:   The parent of the InterfaceDeclaration node.
    /// location: The location of the input text in the source file.
    /// require:  Whether or not to throw a syntax error if the input could not
    ///           be parsed.
    /// return:   The parsed InterfaceDeclaration node, if successful; null otherwise.
    public static parse(String input, Node parent = null, Location location = Location.INVALID, Bool require = true) -> InterfaceDeclaration => null {
        let trait = TraitDeclaration.parse(input, "interface", parent, location, require)
        
        if (trait) {
            let node = new InterfaceDeclaration(parent, location)
            
            trait.cloneTo(node)
            
            return node
        }
    }
}