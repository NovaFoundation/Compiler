package "spectra/tree/nodes"

import "spectra/InvalidParseException"
import "spectra/util/Location"

import "spectra/util/CompilerStringFunctions"

/// @Node extension that represents 
///
/// author: Braden Steffaniak
/// since: 
/// version: 
class Return extends Node {
    visible Value value
    
    /// Create a new Return node.
    /// 
    /// #exampleInputs
    /// 
    /// parent:   The parent of the Return node.
    /// location: The location of the input text in the source file.
    public construct(Node parent = null, Location location = Location.INVALID, Value value = null) {
        super(parent, location)
        
        this.value = value
    }
    
    /// Parse the given input into a Return node. If the input cannot be parsed
    /// into a Return node, null is returned.
    /// 
    /// #exampleInputs:
    ///     Example inputs:
    ///      * 
    ///      * 
    ///      * 
    /// 
    /// input:    The input string to parse into a Return instance.
    /// parent:   The parent of the Return node.
    /// location: The location of the input text in the source file.
    /// require:  Whether or not to throw a syntax error if the input could not
    ///           be parsed.
    /// return:   The parsed Return node, if successful; null otherwise.
    public static parse(String input, Node parent = null, Location location = Location.INVALID, Bool require = true) -> Return {
        if (input.nextWord().equals("return")) {
            var node = new Return(parent, location)
            var contents = input.substring(7).trim()
            
            if (contents.count > 0) {
                node.value = Value.parse(contents, node)
                
                if (node.value == null) {
                    softly throw new InvalidParseException("Invalid return value '#contents'", node)
                    
                    return null
                }
            }
            
            return node
        }
        
        return null
    }
    
    public writeValue() =>
        value != null ?
            value.toNova() :
            ""
    
    public writeNova() => "return #writeValue()".trim()
}