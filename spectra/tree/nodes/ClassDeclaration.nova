package "spectra/tree/nodes"

import "nova/regex/Pattern"
import "nova/datastruct/list/ImmutableArray"

import "spectra/SyntaxErrorException"
import "spectra/InvalidParseException"
import "spectra/SyntaxMessage"
import "spectra/util/Location"
import "spectra/tree/nodes/generics/GenericParameter"
import "spectra/tree/nodes/generics/GenericCompatible"
import "spectra/tree/nodes/variables/InstanceDeclaration"
import "spectra/tree/nodes/variables/VariableDeclaration"
import "spectra/tree/nodes/variables/FieldDeclaration"
import "spectra/tree/nodes/variables/ArrayBracketOverload"
import "spectra/tree/nodes/functions/FunctionDeclaration"
import "spectra/tree/nodes/functions/Constructor"
import "spectra/tree/nodes/functions/BodyFunction"

import "spectra/util/CompilerStringFunctions"

/// @InstanceDeclaration extension that represents 
///
/// author: Braden Steffaniak
/// since: 
/// version: 
class ClassDeclaration extends InstanceDeclaration implements Abstractable, GenericCompatible {
    visible String identifier => "class"
    
    visible ClassDeclaration parentClass => this
    
    visible String location =>
        parentFile.packageDeclaration.location ?
            parentFile.packageDeclaration.location + "/" + name :
            name
    
    public Type extendedClass
    public Type[] implementedInterfaces = new Type[0]
    
    public FieldDeclaration[] fields = new FieldDeclaration[]
    public FunctionDeclaration[] functions = new FunctionDeclaration[]
    
    public immutable Constructor[] constructors => functions.filter({ _.class.isOfType(Constructor) })
    
    visible ArrayBracketOverload arrayBracketOverload
    
    visible Bool isPrivate => visibility.count > 0 && super.isPrivate
    visible Bool isPublic => visibility.count == 0 || super.isPublic
    
    /// Create a new ClassDeclaration node.
    /// 
    /// #exampleInputs
    /// 
    /// parent:   The parent of the ClassDeclaration node.
    /// location: The location of the input text in the source file.
    public construct(Node parent = null, Location location = Location.INVALID) {
        super(parent, location)
        
        genericParameters = new GenericParameter[0]
    }
    
    public addChild(Node child) {
        if (child.class.isOfType(FieldDeclaration)) {
            fields.add(child)
        } else if (child.class.isOfType(FunctionDeclaration)) {
            functions.add(child)
        } else if (child.class.isOfType(ArrayBracketOverload)) {
            if (!arrayBracketOverload) {
                arrayBracketOverload = child
            } else {
                SyntaxErrorException("Array bracket overload already declared for class '#location'", child)
            }
        } else {
            SyntaxMessage.error("Statement '#child' used in wrong context", child)
        }
        
        super.addChild(child)
    }
    
    public replace(Node toReplace, Node replacement) -> Bool =>
        toReplace.class.isOfType(FieldDeclaration) &&
            fields.replace((FieldDeclaration)toReplace, (FieldDeclaration)replacement) ||
        toReplace.class.isOfType(FunctionDeclaration) &&
            functions.replace((FunctionDeclaration)toReplace, (FunctionDeclaration)replacement)
    
    public findCompatibleFunctions(String name, Value[] argumentTypes = null) =>
        functions.filter(func => {
            func.name.equals(name) &&
            (!argumentTypes || func.compatibleArguments(argumentTypes))
        })
    
    public findVariableDeclaration(String name, Bool searchAncestors = true) -> VariableDeclaration {
        return findVariableDeclaration(name, searchAncestors, true)
    }
    
    public findVariableDeclaration(String name, Bool searchAncestors = true, Bool searchExtensions = true) -> VariableDeclaration {
        var field = fields.firstWhere({ _.name.equals(name) })
        
        if (field) {
            return field
        }
        
        if (searchExtensions) {
            
        }
        
        return super.findVariableDeclaration(name, searchAncestors)
    }
    
    public findFunction(String name, Bool searchAncestors = true) -> FunctionDeclaration => null {
        FunctionDeclaration function
        
        if (function = functions.firstWhere({ _.name.equals(name) })) {
            return function
        }
        
        if (searchAncestors) {
            if (function = extendedClass?.getClass(parentFile)?.findFunction(name)) {
                return function
            } else if (function = implementedInterfaces.firstNonNull({ _.getClass(parentFile)?.findFunction(name) })) {
                return function
            }
        }
    }
    
    public parseStatement(String input, Node parent = null, Location location = Location.INVALID, Bool require = true) -> Node {
        Node node = null
        
        until (node) {
            node = Constructor.parse(input, this, location, require)
            node = BodyFunction.parse(input, this, location, require)
            node = FieldDeclaration.parse(input, this, location, require)
            node = ArrayBracketOverload.parse(input, this, location, require)
        }
        
        return node
    }
    
    public generateTemporaryScopeNode() -> Node {
        return new BodyFunction(this)
    }
    
    /// Parse the given input into a ClassDeclaration node. If the input cannot be parsed
    /// into a ClassDeclaration node, null is returned.
    /// 
    /// #exampleInputs:
    ///     Example inputs:
    ///      * class MyClass
    ///      * public class Abc extends MyClass
    ///      * private class Xyz extends Abc implements Multiply, Divide
    /// 
    /// input:    The input string to parse into a ClassDeclaration instance.
    /// parent:   The parent of the ClassDeclaration node.
    /// location: The location of the input text in the source file.
    /// require:  Whether or not to throw a syntax error if the input could not
    ///           be parsed.
    /// return:   The parsed ClassDeclaration node, if successful; null otherwise.
    public static parse(String input, Node parent = null, Location location = Location.INVALID, Bool require = true) =>
        parse(input, "class", parent, location, require)
    
    public static parse(String input, String identifier, Node parent = null, Location location = Location.INVALID, Bool require = true) -> ClassDeclaration => null {
        if ((let index = input.nextWordIndex(identifier)) >= 0) {
            let node = new ClassDeclaration(parent, location)
            
            if (!node.parseModifiers(input, index, require)) {
                return null
            }
            
            let nameStartIndex = input.nextNonWhitespaceIndex(index + identifier.count + 1)
            let nameEndIndex = input.nextWhitespaceIndex(nameStartIndex + 1, defaultReturnValue: input.count)
            
            if (nameStartIndex < nameEndIndex) {
                var name = input.substring(nameStartIndex, nameEndIndex)
                
                if (!node.parseGenericParameters(name)) {
                    toss new InvalidParseException("Unable to parse generic parameters for #identifier '#name'", node)
                } else if (!node.parseName(name, require)) {
                    toss new InvalidParseException("Unable to parse name for #identifier '#input'", node)
                } else if (!node.parseInheritence(input, nameEndIndex, require)) {
                    toss new InvalidParseException("Unable to parse inheritence for #identifier '#input'", node)
                } else {
                    return node
                }
            }
        } else if (require) {
            SyntaxMessage.error("Invalid #identifier declaration '#input'", parent)
        }
    }
    
    parseModifiers(String input, Int index, Bool require) -> Bool {
        var modifiers = input.substring(end: index).trim()
        
        if (!parseModifiers(modifiers)) {
            var invalid = getInvalidModifiers(modifiers)
            
            SyntaxMessage.errorIf("Invalid modifier#{invalid.count != 1 ? "s" : ""}: '#{invalid.join("', '")}'", this, require)
            
            return false
        }
        
        return true
    }
    
    parseName(String name, Bool require) => true {
        if (genericParameters.count > 0) {
            name = name.substring(end: name.indexOf('<')).trim()
        }
        
        if (name.isIdentifier) {
            this.name = name
            this.type = new Type(name)
        } else {
            SyntaxMessage.errorIf("Invalid class name '#name'", this, require)
            
            return false
        }
    }
    
    parseInheritence(String input, Int nameEndIndex, Bool require) -> Bool {
        var extension       = input.substring(input.nextNonWhitespaceIndex(nameEndIndex + 1, defaultReturnValue: input.count))
        var implementations = ""
        var implementsIndex = extension.nextWordIndex("implements")
        
        if (implementsIndex >= 0) {
            implementations = extension.substring(start: implementsIndex).trim()
            extension       = extension.substring(end:   implementsIndex).trim()
        }
        
        return parseExtension(extension, require) && parseImplementations(implementations, require)
    }
    
    parseExtension(String extension, Bool require) -> Bool {
        if (extension.startsWith(/extends\s+/)) {
            extension = extension.substring("extends ".count).trim()
            
            extendedClass = Type.parse(extension, this)
            
            if (!extendedClass.name.isIdentifier) {
                SyntaxMessage.errorIf("Extended class '#extension' is not a valid type", this, require)
                
                return false
            }
            
            return true
        }
        
        return extension.count == 0
    }
    
    parseImplementations(String implementations, Bool require) -> Bool {
        if (implementations.startsWith(/implements\s+/)) {
            implementedInterfaces = implementations.substring("implements ".count).splitAtCommas(searchGenerics: true).map({ Type.parse(_, this) })
            
            if (implementedInterfaces.any(i => { !i || !i.name.isIdentifier })) {
                var invalid = implementedInterfaces.filter(i => { i && !i.name.isIdentifier })
                
                SyntaxMessage.errorIf("Invalid interface type#{invalid.count != 1 ? "s" : ""}: '#{invalid.join("', '")}'", this, require)
                
                return false
            }
            
            return true
        }
        
        return implementations.count == 0
    }
    
    [Override]
    public parseModifier(String modifier) -> Bool {
        if (super.parseModifier(modifier)) return true
            
        match (modifier)
            case "abstract" isAbstract = true
            default return false
        return true
    }
    
    public validateTypes() =>
        fields.all({ _.validateTypes() }, false) &
        functions.all({ _.validateTypes() }, false)
    
    public parsePlaceholders() =>
        fields.all({ _.parsePlaceholders() }, false) &
        functions.all({ _.parsePlaceholders() }, false)
    
    public writeHeader() =>
        "#identifier #{name}#writeGenericParameters() #writeExtension() #writeImplementedInterfaces()".replace(/\s+/, " ").trim()
    
    public writeExtension() =>
        extendedClass ?
            "extends #extendedClass" :
            ""
    
    public writeImplementedInterfaces() =>
        implementedInterfaces.count > 0 ?
            "implements #{implementedInterfaces.join(", ")}" :
            ""
    
    public writeArrayBracketOverload() =>
        arrayBracketOverload ?
            arrayBracketOverload.toNova() :
            ""
    
    public toNova() =>
        (writeHeader() + " {\n" +
        writeArrayBracketOverload() +"\n\n" +
        (fields.map({ _.toNova() }).join("\n") + "\n\n" +
        functions.map({ _.toNova() }).join("\n\n")).trim() + "\n" +
        "}").trim()
    
    [Override]
    public toString() => writeHeader()
    
    public cloneTo(ClassDeclaration other) => other {
        super.cloneTo(other)
        GenericCompatible.super.cloneTo(other)
        Abstractable.super.cloneTo(other)
        
        other.extendedClass = extendedClass
        other.implementedInterfaces = implementedInterfaces
        other.fields = fields
        other.functions = functions
        other.arrayBracketOverload = arrayBracketOverload
    }
}