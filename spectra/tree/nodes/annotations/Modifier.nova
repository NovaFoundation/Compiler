package "spectra/tree/nodes/annotations"

import "nova/datastruct/HashMap"
import "nova/datastruct/ImmutableHashMap"

import "spectra/tree/nodes/Node"

trait Modifier extends Annotation {
    visible static final immutable HashMap<String, Class> MODIFIERS
    
    visible String aliasUsed
    
    static {
        let modifiers = new HashMap<String, Class>()
        
        for (class in Class.ALL.filter({ _.isOfType(Modifier) })) {
            let alias = "x"
            // for (alias in class.fieldMap.aliases) {
            //     if (modifiers[alias]) {
            //         // error error werrororr! already contains key
            //     } else {
                    modifiers[alias] = class
            //     }
            // }
        }
        
        MODIFIERS = modifiers.toImmutable()
    }
    
    public apply(Node to, String alias) => true {
        if (to != this.parent) {
            if (onAppliedAsModifier(to, false)) {
                to.addAnnotation(this)
                
                aliasUsed = alias
            } else {
                return false
            }
        }
    }
    
    public onAppliedAsModifier(Node toNode, Bool throwError = true) =>
        onApplied(toNode, throwError)
    
    public writeNova() => aliasUsed ?: super.writeNova()
}