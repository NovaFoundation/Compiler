package "spectra/tree/nodes/controlstructures"

import "spectra/tree/nodes/Node"
import "spectra/tree/nodes/Scope"
import "spectra/SyntaxErrorException"
import "spectra/SyntaxMessage"
import "spectra/util/Location"

import "spectra/util/CompilerStringFunctions"

/// @ControlStructure extension that represents 
///
/// author: Braden Steffaniak
/// since: 
/// version: 
class ElseStatement extends ControlStructure {
    visible IfStatement inlineIf
    
    public Scope scope => inlineIf != null ? inlineIf.scope : scope {
        set {
            if (inlineIf != null) {
                inlineIf.scope = value
            } else {
                scope = value
            }
        }
    }
    
    /// Create a new ElseStatement node.
    /// 
    /// #exampleInputs
    /// 
    /// parent:   The parent of the ElseStatement node.
    /// location: The location of the input text in the source file.
    public construct(Node parent = null, Location location = Location.INVALID) {
        super(parent, location)
    }
    
    /// Parse the given input into a ElseStatement node. If the input cannot be parsed
    /// into a ElseStatement node, null is returned.
    /// 
    /// #exampleInputs:
    ///     Example inputs:
    ///      * 
    ///      * 
    ///      * 
    /// 
    /// input:    The input string to parse into a ElseStatement instance.
    /// parent:   The parent of the ElseStatement node.
    /// location: The location of the input text in the source file.
    /// require:  Whether or not to throw a syntax error if the input could not
    ///           be parsed.
    /// return:   The parsed ElseStatement node, if successful; null otherwise.
    public static parse(String input, Node parent = null, Location location = Location.INVALID, Bool require = true) -> ElseStatement {
        if (input.nextWord().equals("else")) {
            var contents = input.substring("else".count).trim()
            
            var node = new ElseStatement(parent, location)
            
            if (node.parseContents(input, contents)) {
                return node
            }
        }
        
        return null
    }
    
    parseContents(String input, String contents) => true {
        if (contents.nextWord().equals("if")) {
            inlineIf = IfStatement.parse(contents, this)
            
            if (inlineIf == null) {
                SyntaxMessage.error("Unable parse else if statement '#input'", this, throwException: false)
                
                return false
            }
        } else if (contents.count > 0) {
            SyntaxMessage.error("Unable parse else statement '#input'", this, throwException: false)
            
            return false
        }
    }
    
    public writeNova() =>
        "else " + (inlineIf != null ? inlineIf.toNova() : scope.toNova())
}