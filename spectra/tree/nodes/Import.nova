package "spectra/tree/nodes"

import "spectra/SyntaxMessage"
import "spectra/SyntaxErrorException"
import "spectra/util/Location"

import "spectra/util/CompilerStringFunctions"

class Import extends Node {
    public Bool used
    
    public String alias, importLocation
    
    visible String parentLocation => importLocation.substring(0, importLocation.lastIndexOf("/", defaultReturnValue: 0))
    visible String className => importLocation.substring(importLocation.lastIndexOf("/") + 1)
    
    visible Bool isDefault => NovaFile.DEFAULT_IMPORTS.any({ _.equals(importLocation) })
    
    public static String IDENTIFIER = "import"
    public static String ALIAS_IDENTIFIER = "as"
    
    visible ClassDeclaration classDeclaration => program.getClassDeclaration(importLocation)
    
    public construct(Node parent = null, Location location = Location.INVALID) {
        super(parent, location)
        
        
    }
    
    public getClassLocation(Bool aliased = false) =>
    	aliased && alias ? "#parentLocation/#alias" : importLocation
    
    /// Parse the given input into a Import node. If the input cannot be parsed
    /// into a Import node, null is returned.
    /// 
    /// #exampleInputs
    ///     Example inputs:
    ///      * import "nova/datastruct/list/Array" as MyArray
    ///      * import "nova/datastruct/Tree"
    ///      * import "nova/Object"
    /// 
    /// input:    The input string to parse into a Import instance.
    /// parent:   The parent of the Import node.
    /// location: The location of the input text in the source file.
    /// require:  Whether or not to throw a syntax error if the input could not
    ///           be parsed.
    /// return:   The parsed Import node, if successful; null otherwise.
    public static parse(String input, Node parent = null, Location location = Location.INVALID, Bool require = true) -> Import => null {
        if (input.nextWordIndex(IDENTIFIER) == 0) {
            var node = new Import(parent, location)
            
            var quoteStart = input.nextNonWhitespaceIndex(IDENTIFIER.count)
            
            if (quoteStart < 0 || input[quoteStart] != '"') {
                return null
            }
            
            var quoteEnd = input.findEndingChar('"', quoteStart)
            
            if (quoteEnd < 0) {
                SyntaxMessage.error("Missing ending quotation for import statement", node)
            }
            
            var importLocation = input.substring(quoteStart + 1, quoteEnd)
            var alias = input.substring(quoteEnd + 1).trim()
            
            node.importLocation = importLocation
            node.alias = alias.count > 0 ? alias : null
            
            if (true) {//node.validateImportLocation(importLocation) && node.validateAlias(alias, require))
                return node
            }
        }
    }
    
    public writeNova() => "import \"#importLocation\""
}