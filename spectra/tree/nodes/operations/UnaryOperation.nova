package "spectra/tree/nodes/operations"

import "nova/datastruct/HashMap"

import "spectra/SyntaxErrorException"
import "spectra/InvalidParseException"
import "spectra/SyntaxMessage"
import "spectra/tree/nodes/Value"
import "spectra/tree/nodes/Node"
import "spectra/util/Location"

import "spectra/util/CompilerStringFunctions"

class UnaryOperation extends Value {
    visible static Byte LEFT = -1, EITHER = 0, RIGHT = 1
    
    visible Byte operatorSide
    
    public Operator operator
    public Value operand
    
    /// Create a new UnaryOperation node.
    /// 
    /// #exampleInputs
    /// 
    /// parent:   The parent of the UnaryOperation node.
    /// location: The location of the input text in the source file.
    public construct(Node parent = null, Location location = Location.INVALID) {
        super(parent, location)
    }
    
    /// Parse the given input into a UnaryOperation node. If the input cannot be parsed
    /// into a UnaryOperation node, null is returned.
    /// 
    /// #exampleInputs:
    ///     Example inputs:
    ///      * 
    ///      * 
    ///      * 
    /// 
    /// input:    The input string to parse into a UnaryOperation instance.
    /// parent:   The parent of the UnaryOperation node.
    /// location: The location of the input text in the source file.
    /// require:  Whether or not to throw a syntax error if the input could not
    ///           be parsed.
    /// return:   The parsed UnaryOperation node, if successful; null otherwise.
    public static parse(String input, Node parent = null, Location location = Location.INVALID, Bool require = true) -> UnaryOperation => null {
        var matches = input.findOperatorIndices(operators: Operator.UNARY_OPERATORS)
        
        if (matches.count == 1) {
            var node = new UnaryOperation(parent, location)
            var match = matches.first
            
            if (!node.parseOperator(input, match)) {
                softly throw new InvalidParseException("Could not parse unary operator for '#input'", node)
            } else if (!node.parseOperand(input, match)) {
                softly throw new InvalidParseException("Could not parse unary operand for '#input'", node)
            } else {
                return node
            }
        }
    }
    
    parseOperator(String input, Int match) => false {
        var value = input.getGroupedChars(Operator.UNARY_OPERATOR_CHARS, start: match)
        
        if ((match == 0) ^ (match + value.count == input.count)) {
            operator = new Operator(this, location, value)
            operatorSide = match == 0 ? LEFT : RIGHT
            
            return true
        }
    }
    
    parseOperand(String input, Int match) => false {
        String value
        
        if (match == 0) {
            value = input.substring(operator.value.count).trim()
        } else {
            value = input.substring(end: match).trim()
        }
        
        return (operand = Value.parse(value, this)) != null
    }
    
    public writeNova() =>
        operatorSide == LEFT ?
            "#{operator.toNova()}#{operand.toNova()}" :
            "#{operand.toNova()}#{operator.toNova()}"
    
    // visible static HashMap<String, Int> SIDES
    // visible static HashMap<String, Bool> REQUIRE_VARIABLE
    
    // /**
    //  * Initialize the SIDES HashMap.
    //  */
    // static {
    //     SIDES = new HashMap()
    //     REQUIRE_VARIABLE = new HashMap()
        
    //     SIDES["-"]  = LEFT
    //     SIDES["--"] = EITHER
    //     SIDES["++"] = EITHER
    //     SIDES["!"]  = LEFT
    //     SIDES["~"]  = LEFT
        
    //     REQUIRE_VARIABLE["-"]  = false
    //     REQUIRE_VARIABLE["--"] = true
    //     REQUIRE_VARIABLE["++"] = true
    //     REQUIRE_VARIABLE["!"]  = false
    //     REQUIRE_VARIABLE["~"]  = false
    // }
}