package "spectra/tree/nodes/exceptionhandling"

import "spectra/SyntaxErrorException"
import "spectra/InvalidParseException"
import "spectra/tree/nodes/Node"
import "spectra/tree/nodes/Type"
import "spectra/tree/nodes/Scope"
import "spectra/util/Location"

import "spectra/util/CompilerStringFunctions"

/// @Node extension that represents 
///
/// author: Braden Steffaniak
/// since: 
/// version: 
class Catch extends Node {
    visible Bool soft = false
    
    visible Type exception
    visible String variable
    
    visible Scope scope <=> scope
    
    /// Create a new Catch node.
    /// 
    /// #exampleInputs
    /// 
    /// parent:   The parent of the Catch node.
    /// location: The location of the input text in the source file.
    public construct(Node parent = null, Location location = Location.INVALID) {
        super(parent, location)
        
        scope = new Scope(this, location)
    }
    
    /// Parse the given input into a Catch node. If the input cannot be parsed
    /// into a Catch node, null is returned.
    /// 
    /// #exampleInputs:
    ///     Example inputs:
    ///      * 
    ///      * 
    ///      * 
    /// 
    /// input:    The input string to parse into a Catch instance.
    /// parent:   The parent of the Catch node.
    /// location: The location of the input text in the source file.
    /// require:  Whether or not to throw a syntax error if the input could not
    ///           be parsed.
    /// return:   The parsed Catch node, if successful; null otherwise.
    public static parse(String input, Node parent = null, Location location = Location.INVALID, Bool require = true) -> Catch {
        if (input.nextWord().equals("catch")) {
            var node = new Catch(parent, location)
            
            var contents = input.substring("catch".count).trim()
            
            if (contents.nextWord().equals("all")) {
                node.soft = true
                
                contents = contents.substring("all".count).trim()
            }
            
            if (contents.count > 0) {
                if (contents.first == '(') {
                    if (contents.last == ')') {
                        contents = contents.substring(1, contents.count - 1).trim()
                    } else {
                        return null
                    }
                }
                
                if (!node.parseException(contents)) {
                    softly throw new InvalidParseException("Unable to parse exception '#contents'", node)
                } else {
                    return node
                }
            }
        }
        
        return null
    }
    
    parseException(String input) => true {
        var values = input.splitValues()
        
        match (values.count) {
            case 2 {
                variable = values[1]
                
                fallthrough  
            } case 1 {
                return (exception = Type.parse(values[0])) != null
            }
            default return false
        }
    }
    
    public writeException() =>
        exception.toNova() + (variable ? " #variable" : "")
    
    public writeNova() =>
        "catch #{soft ? "all" : ""}".trim() + " (#writeException()) #scope.toNova()"
}