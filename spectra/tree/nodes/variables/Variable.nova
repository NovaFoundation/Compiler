package "spectra/tree/nodes/variables"

import "spectra/InvalidParseException"
import "spectra/util/Location"
import "spectra/tree/nodes/Node"
import "spectra/tree/nodes/Type"
import "spectra/tree/nodes/Identifier"
import "spectra/tree/nodes/Accessible"
import "spectra/tree/nodes/Value"
import "spectra/tree/nodes/operations/Assignable"

import "spectra/util/CompilerStringFunctions"

class Variable extends Identifier implements Accessible, Assignable {
    public Bool safeNavigation <=> safeNavigation
    public Accessible accessedNode <=> accessedNode
    
    public VariableDeclaration declaration
    
    public Type type => declaration.type
    
    /// Create a new Variable node.
    /// 
    /// parent:   The parent of the Variable node.
    /// location: The location of the input text in the source file.
    public construct(Node parent = null, Location location = Location.INVALID, VariableDeclaration declaration = null) {
        super(parent, location)
        
        this.declaration = declaration
    }
    
    public static findVariable(String name, Node parent, Location location = parent.location) -> Variable => null {
        if (name.isIdentifier) {
            var declaration = parent.findVariableDeclaration(name)
            
            if (declaration != null) {
                return new Variable(parent, location, declaration)
            } else {
                softly throw new InvalidParseException("Could not find declaration for identifier '#name'")
            }
        }
    }
    
    [Override]
    public onAssigned(Value value) {
        ((Assignable)declaration).onAssigned(value)
    }
    
    public cloneTo(Variable other) => other {
        super.cloneTo(other)
        Accessible.super.cloneTo(other)
        
        other.declaration = declaration
    }
    
    public writeNova() => declaration.name + writeArrayAccess() + writeAccessedNodes()
}