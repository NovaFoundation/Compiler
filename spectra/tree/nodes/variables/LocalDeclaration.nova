package "spectra/tree/nodes/variables"

import "spectra/tree/nodes/Node"
import "spectra/tree/nodes/Value"
import "spectra/tree/nodes/Type"
import "spectra/tree/nodes/operations/Assignable"
import "spectra/util/Location"

import "spectra/util/CompilerStringFunctions"

class LocalDeclaration extends VariableDeclaration implements Assignable {
    visible Bool isImplicit => false
    
    /// Create a new LocalDeclaration node.
    /// 
    /// #exampleInputs
    /// 
    /// parent:   The parent of the LocalDeclaration node.
    /// location: The location of the input text in the source file.
    public construct(Node parent = null, Location location = Location.INVALID) {
        super(parent, location)
    }
    
    /// Parse the given input into a LocalDeclaration node. If the input cannot be parsed
    /// into a LocalDeclaration node, null is returned.
    /// 
    /// #exampleInputs:
    ///     Example inputs:
    ///      * 
    ///      * 
    ///      * 
    /// 
    /// input:    The input string to parse into a LocalDeclaration instance.
    /// parent:   The parent of the LocalDeclaration node.
    /// location: The location of the input text in the source file.
    /// require:  Whether or not to throw a syntax error if the input could not
    ///           be parsed.
    /// return:   The parsed LocalDeclaration node, if successful; null otherwise.
    public static parse(String input, Node parent = null, Location location = Location.INVALID, Bool require = true) -> LocalDeclaration => null {
        if (let declaration = VariableDeclaration.parse(input, parent, location, require)) {
            var node = new LocalDeclaration(parent, location)
            
            return (LocalDeclaration)declaration.cloneTo(node)
        }
    }
    
    public cloneTo(LocalDeclaration other) => other {
        super.cloneTo(other)
    }
}