package "spectra/tree/nodes/variables"

import "spectra/tree/nodes/Node"
import "spectra/SyntaxErrorException"
import "spectra/util/Location"

import "spectra/util/CompilerStringFunctions"

/// @VariableDeclaration extension that represents 
///
/// author: Braden Steffaniak
/// since: 
/// version: 
class InstanceDeclaration extends VariableDeclaration {
    public Bool isStatic = false
    visible Bool isInstance => !isStatic
    
    public String visibility = ""
    
    public Bool isPublic => visibility.equals("public")
    public Bool isPrivate => visibility.count == 0 || visibility.equals("private")
    public Bool isProtected => visibility.equals("protected")
    
    /// Create a new InstanceDeclaration node.
    /// 
    /// #exampleInputs
    /// 
    /// parent:   The parent of the InstanceDeclaration node.
    /// location: The location of the input text in the source file.
    public construct(Node parent = null, Location location = Location.INVALID) {
        super(parent, location)
    }
    
    /// Parse the given input into a InstanceDeclaration node. If the input cannot be parsed
    /// into a InstanceDeclaration node, null is returned.
    /// 
    /// #exampleInputs:
    ///     Example inputs:
    ///      * 
    ///      * 
    ///      * 
    /// 
    /// input:    The input string to parse into a InstanceDeclaration instance.
    /// parent:   The parent of the InstanceDeclaration node.
    /// location: The location of the input text in the source file.
    /// require:  Whether or not to throw a syntax error if the input could not
    ///           be parsed.
    /// return:   The parsed InstanceDeclaration node, if successful; null otherwise.
    public static parse(String input, Node parent = null, Location location = Location.INVALID, Bool require = true) -> InstanceDeclaration {
        var words = input.splitValues()
        
        var declaration = VariableDeclaration.parse(words.takeLast(2).join(" "), parent, location, require)
        
        if (declaration) {
            var node = new InstanceDeclaration(parent, location)
            
            if (node.parseModifiers(words.take(words.count - 2))) {
                return (InstanceDeclaration)declaration.cloneTo(node)
            }
        }
        
        return null
    }
    
    [Override]
    public parseModifier(String modifier) -> Bool {
        if (super.parseModifier(modifier)) return true
        
        match (modifier)
            case "public"    fallthrough
            case "private"   fallthrough
            case "visible"   fallthrough
            case "protected" visibility = modifier
            case "static"    isStatic   = true
            default return false
        return true
    }
    
    public writeVisibility() => visibility ? "#visibility" : ""
    public writeStatic() => isStatic ? "static" : ""
    public writeModifiers() => "#writeVisibility() #writeStatic() "
    
    public cloneTo(InstanceDeclaration other) => other {
        super.cloneTo(other)
        
        other.isStatic = isStatic
        other.visibility = visibility
    }
}