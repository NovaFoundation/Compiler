package "spectra/tree/nodes"

import "spectra/SyntaxErrorException"
import "spectra/InvalidParseException"
import "spectra/util/Location"

import "spectra/util/CompilerStringFunctions"

/// @Node extension that represents 
///
/// author: Braden Steffaniak
/// since: 
/// version: 
[AutoFinal]
class Cast extends Value {
    public var Value value
    
    /// Create a new Cast node.
    /// 
    /// #exampleInputs
    /// 
    /// parent:   The parent of the Cast node.
    /// location: The location of the input text in the source file.
    public construct(Node parent = null, Location location = Location.INVALID) {
        super(parent, location)
    }
    
    /// Parse the given input into a Cast node. If the input cannot be parsed
    /// into a Cast node, null is returned.
    /// 
    /// #exampleInputs:
    ///     Example inputs:
    ///      * 
    ///      * 
    ///      * 
    /// 
    /// input:    The input string to parse into a Cast instance.
    /// parent:   The parent of the Cast node.
    /// location: The location of the input text in the source file.
    /// require:  Whether or not to throw a syntax error if the input could not
    ///           be parsed.
    /// return:   The parsed Cast node, if successful; null otherwise.
    public static parse(String input, Node parent = null, Location location = Location.INVALID, Bool require = true) -> Cast => null {
        if (input.first == '(') {
            let node = new Cast(parent, location)
            
            let end = input.findEndingMatch(0, '(', ')')
            
            if (end < 0) {
                softly throw new InvalidParseException("Failed to find ending parenthesis", node)
            } else {
                if (!node.parseType(let contents = input.substring(1, end).trim())) {
                    softly throw new InvalidParseException("Failed to parse cast type '#contents'")
                } else if (!node.parseValue(let value = input.substring(end + 1).trim())) {
                    softly throw new InvalidParseException("Failed to parse casted value '#value'")
                } else {
                    return node
                }
            }
        }
    }
    
    parseValue(String input) => value = Value.parse(input, this)
    
    public writeNova() => "(#{writeType()})#value.toNova()"
}