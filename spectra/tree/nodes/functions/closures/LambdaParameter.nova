package "spectra/tree/nodes/functions/closures"

import "spectra/InvalidParseException"
import "spectra/tree/nodes/Node"
import "spectra/tree/nodes/Type"
import "spectra/tree/nodes/functions/Parameter"
import "spectra/tree/nodes/functions/ParameterList"
import "spectra/util/Location"

import "spectra/tree/nodes/functions/FunctionCall"

import "spectra/util/CompilerStringFunctions"

class LambdaParameter extends Parameter {
    visible Parameter sourceParameter {
        get {
            var parameters = (ParameterList)parent
            var index = parameters.count
            var lambda = parameters.parentLambda
            var closure = lambda.closureDeclaration
            
            if (closure) {
                var sourceParameters = closure.parameters
                
                return sourceParameters && sourceParameters.count > index ? sourceParameters[index] : null
            }
        }
        
        no set
    }
    
    /// Create a new LambdaParameter node.
    /// 
    /// #exampleInputs
    /// 
    /// parent:   The parent of the LambdaParameter node.
    /// location: The location of the input text in the source file.
    public construct(Node parent = null, Location location = Location.INVALID) {
        super(parent, location)
    }
    
    /// Parse the given input into a LambdaParameter node. If the input cannot be parsed
    /// into a LambdaParameter node, null is returned.
    /// 
    /// #exampleInputs:
    ///     Example inputs:
    ///      * 
    ///      * 
    ///      * 
    /// 
    /// input:    The input string to parse into a LambdaParameter instance.
    /// parent:   The parent of the LambdaParameter node.
    /// location: The location of the input text in the source file.
    /// require:  Whether or not to throw a syntax error if the input could not
    ///           be parsed.
    /// return:   The parsed LambdaParameter node, if successful; null otherwise.
    public static parse(String input, Node parent = null, Location location = Location.INVALID, Bool require = true) -> LambdaParameter => null {
        var node = new LambdaParameter(parent, location)
        var parameter = Parameter.parse(input, parent, location, require)
        
        if (parameter) {
            return (LambdaParameter)parameter.cloneTo(node)
        } else if (!input.isIdentifier) {
            softly throw new InvalidParseException("Invalid lambda parameter name '#input' given", node)
        } else if (!node.parseFromSourceParamter(input)) {
            softly throw new InvalidParseException("Could not parse lambda parameter '#input'", node)
        } else {
            return node
        }
    }
    
    parseFromSourceParamter(String name) => false {
        var source = sourceParameter
        
        if (source) {
            source.cloneTo(this)
            
            this.name = name
            
            return true
        }
        
        softly throw new InvalidParseException("Could not find corresponding closure parameter for lambda parameter '#name'", this)
    }
}