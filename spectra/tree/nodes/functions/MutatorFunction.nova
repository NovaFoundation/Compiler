package "spectra/tree/nodes/functions"

import "spectra/tree/nodes/Node"
import "spectra/tree/nodes/Scope"
import "spectra/util/Location"
import "spectra/SyntaxMessage"

import "spectra/util/CompilerStringFunctions"

class MutatorFunction extends PropertyFunction {
    /// Create a new MutatorFunction node.
    /// 
    /// #exampleInputs
    /// 
    /// parent:   The parent of the MutatorFunction node.
    /// location: The location of the input text in the source file.
    public construct(Node parent = null, Location location = Location.INVALID) {
        super(parent, location)
    }
    
    /// Parse the given input into a MutatorFunction node. If the input cannot be parsed
    /// into a MutatorFunction node, null is returned.
    /// 
    /// #exampleInputs:
    ///     Example inputs:
    ///      * 
    ///      * 
    ///      * 
    /// 
    /// input:    The input string to parse into a MutatorFunction instance.
    /// parent:   The parent of the MutatorFunction node.
    /// location: The location of the input text in the source file.
    /// require:  Whether or not to throw a syntax error if the input could not
    ///           be parsed.
    /// return:   The parsed MutatorFunction node, if successful; null otherwise.
    public static parse(String input, Node parent = null, Location location = Location.INVALID, Bool require = true) -> MutatorFunction => null {
        
    }
}