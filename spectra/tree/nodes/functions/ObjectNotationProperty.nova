package "spectra/tree/nodes/functions"

import "spectra/SyntaxErrorException"
import "spectra/InvalidParseException"
import "spectra/util/Location"
import "spectra/tree/nodes/Node"
import "spectra/tree/nodes/Value"
import "spectra/tree/nodes/NodeList"
import "spectra/tree/nodes/variables/VariableDeclaration"
import "spectra/tree/nodes/variables/Variable"
import "spectra/tree/nodes/operations/Assignment"
import "spectra/tree/nodes/operations/Operator"

import "spectra/util/CompilerStringFunctions"

/// @Assignment extension that represents 
///
/// author: Braden Steffaniak
/// since: 
/// version: 
class ObjectNotationProperty extends Assignment {
    /// Create a new ObjectNotationProperty node.
    /// 
    /// #exampleInputs
    /// 
    /// parent:   The parent of the ObjectNotationProperty node.
    /// location: The location of the input text in the source file.
    public construct(Node parent = null, Location location = Location.INVALID) {
        super(parent, location)
    }
    
    /// Parse the given input into a ObjectNotationProperty node. If the input cannot be parsed
    /// into a ObjectNotationProperty node, null is returned.
    /// 
    /// #exampleInputs:
    ///     Example inputs:
    ///      * 
    ///      * 
    ///      * 
    /// 
    /// input:    The input string to parse into a ObjectNotationProperty instance.
    /// parent:   The parent of the ObjectNotationProperty node.
    /// location: The location of the input text in the source file.
    /// require:  Whether or not to throw a syntax error if the input could not
    ///           be parsed.
    /// return:   The parsed ObjectNotationProperty node, if successful; null otherwise.
    public static parse(String input, Node parent = null, Location location = Location.INVALID, Bool require = true) -> ObjectNotationProperty {
        var assignmentIndex = input.findOperatorOnTopLevel(':')
        
        if (assignmentIndex > 0) {
            var node = new ObjectNotationProperty(parent, location)
            
            if (node.parseAssignedNode(Assignment.findAssigned(input, assignmentIndex)) && node.parseAssignment(Assignment.findAssignment(input, assignmentIndex))) {
                node.operators.add(new Operator(node, location, ":"))
                
                return node
            }
        }
        
        return null
    }
    
    parseAssignedNode(String input) => false {
        var variable = Variable.findVariable(input, parent)
        
        if (variable) {
            assigned = variable
            
            return true
        }
    }
    
    parseAssignment(String input) => false {
        var value = Value.parse(input, this)
        
        if (value) {
            assignment = value
            
            return true
        }
    }
    
    public writeNova() => "#assigned.toNova(): #assignment.toNova()"
}