package "spectra/tree/nodes/functions"

import "spectra/SyntaxErrorException"
import "spectra/InvalidParseException"
import "spectra/util/Location"
import "spectra/tree/nodes/Node"
import "spectra/tree/nodes/Type"
import "spectra/tree/nodes/PlaceholderValue"
import "spectra/tree/nodes/NodeList"
import "spectra/tree/nodes/functions/FunctionDeclaration"
import "spectra/tree/nodes/variables/VariableDeclaration"

import "spectra/util/CompilerStringFunctions"

/// @FunctionCall extension that represents 
///
/// author: Braden Steffaniak
/// since: 
/// version: 
class Instantiation extends FunctionCall {
    visible ObjectNotation objectNotation
    
    visible Instantiation parentInstantiation => this
    
    /// Create a new Instantiation node.
    /// 
    /// #exampleInputs
    /// 
    /// parent:   The parent of the Instantiation node.
    /// location: The location of the input text in the source file.
    public construct(Node parent = null, Location location = Location.INVALID) {
        super(parent, location)
    }
    
    public addChild(Node node) {
        objectNotation = objectNotation ?: new ObjectNotation(this)
        
        objectNotation.addChild(node)
    }
    
    public parsePlaceholderChildren(NodeList<PlaceholderValue> nodes) -> Bool =>
        nodes.children.all(placeholder -> {
            addChild(placeholder)
            
            var property = parseStatement(placeholder.value, objectNotation)
            
            if (property != null) {
                objectNotation.replace(placeholder, property)
            }
            
            return property != null
        }, false)
    
    public parseStatement(String input, Node parent = null, Location location = Location.INVALID, Bool require = true) -> Node => null {
        var node = ObjectNotationProperty.parse(input, parent, location, require)
        
        return node
    }
    
    /// Parse the given input into a Instantiation node. If the input cannot be parsed
    /// into a Instantiation node, null is returned.
    /// 
    /// #exampleInputs:
    ///     Example inputs:
    ///      * 
    ///      * 
    ///      * 
    /// 
    /// input:    The input string to parse into a Instantiation instance.
    /// parent:   The parent of the Instantiation node.
    /// location: The location of the input text in the source file.
    /// require:  Whether or not to throw a syntax error if the input could not
    ///           be parsed.
    /// return:   The parsed Instantiation node, if successful; null otherwise.
    public static parse(String input, Node parent = null, Location location = Location.INVALID, Bool require = true) -> Instantiation {
        if (input.nextWord().equals("new")) {
            var node = new Instantiation(parent, location)
            
            var callString = input.substring("new".count + 1).trim()
            var parenthesisIndex = callString.indexOf('(', defaultReturnValue: 0)
            var className = callString.substring(0, parenthesisIndex).trim()
            
            if (className.isIdentifier) {
                var clazz = parent.parentFile.getImportedClass(className)
                
                if (clazz != null) {
                    FunctionDeclaration constructor = clazz.functions.firstWhere({ _.name.equals("construct") })
                    
                    if (constructor != null) {
                        var parameters = callString.substring(parenthesisIndex)
                        var call = FunctionCall.parse(className + parameters, parent, declaration: constructor)
                        
                        if (call != null) {
                            return (Instantiation)call.cloneTo(node)
                        }
                    }
                }
            }
        }
        
        return null
    }
    
    public writeName() =>
        declaration.parentClass.name
    
    public writeObjectNotation() =>
        objectNotation != null ?
            " " + objectNotation.toNova() :
            ""
    
    public writeNova() => "new #super.writeNova()" + writeArrayAccess() + writeObjectNotation() + writeAccessedNodes()
}